top_mean_NES_df_up <- top_mean_NES_df[top_mean_NES_df$shASS1vControl > 1,]
top_mean_NES_df_up <- top_mean_NES_df_up[order(top_mean_NES_df_up$shASS1vControl, decreasing = T),]
top_mean_NES_df_up$KEGG <- factor(top_mean_NES_df_up$KEGG, levels = top_mean_NES_df_up$KEGG)
pathway_HM(mean_NES_df = top_mean_NES_df_up,
pathway_name = "generic_metabolism",
pathways = all_metabolic_enzymes,
manual_pathway = T)
top_mean_NES_df_down <- top_mean_NES_df[top_mean_NES_df$shASS1vControl < -1,]
top_mean_NES_df_down <- top_mean_NES_df_down[order(top_mean_NES_df_down$shASS1vControl, decreasing = T),]
top_mean_NES_df_down$KEGG <- factor(top_mean_NES_df_down$KEGG, levels = top_mean_NES_df_down$KEGG)
pathway_HM(mean_NES_df = top_mean_NES_df_down,
pathway_name = "generic_metabolism",
pathways = all_metabolic_enzymes,
manual_pathway = T)
to_write <- all_metabolic_enzymes
to_write$gene <- gsub("[>_].*","",to_write$gene)
to_write <- unique(to_write)
View(to_write)
pathway_HM(mean_NES_df = mean_NES_df[,c(1,2)],
pathway_name = "KEGG_VALINE_LEUCINE_AND_ISOLEUCINE_DEGRADATION",
pathways = BCCA_GOT_MDH1)
library(readxl)
library(vsn)
library(omicToolsTest)
library(limma)
library(readr)
library(dplyr)
library(reshape2)
library(pheatmap)
library(ggplot2)
source("~/Dropbox/marco_metactivity/scripts/metactivity_function.R")
PLASMAX <- as.data.frame(
read_excel("Dropbox/marco_metactivity/data/Metabolomics 786M1A_shASS1.xlsx",
sheet = "Sheet2"))
targets <- PLASMAX[,c(1,2)]
names(targets) <- c("sample","condition")
View(targets)
targets <- targets[!grepl("#7",targets$condition),]
View(targets)
View(PLASMAX)
PLASMAX <- PLASMAX[PLASMAX$filename %in% targets$sample,]
targets$condition <- gsub("#.*","",targets$condition)
batches <- as.data.frame(t(PLASMAX[,c(-1,-2)]))
names(batches) <- targets$sample
row.names(batches) <- gsub(" ", "_", row.names(batches))
row.names(batches) <- tolower(row.names(batches))
batches <- as.data.frame(apply(batches,2,function(x){as.numeric(as.character(x))}))
batches[batches == 0] <- NA
batches <- log2(batches)
row.names(batches) <- names(PLASMAX[,c(-1,-2)])
comparisons <- list("shASS1vControl" = c(2,-1))
limmaRes <- runLimma(batches, targets, comparisons = comparisons)
t_table <- ttop_list_to_t_table(
limma_res_to_ttop_list(limma_res = limmaRes,
comp_names = names(comparisons),
number = length(batches[,1]),
adjust.method = "fdr"))
to_dotplot <- t_table
# to_dotplot <- to_dotplot[-45,] #remove itaconitate misslabeled
to_dotplot <- to_dotplot[order(to_dotplot$shASS1vControl, decreasing = F),]
to_dotplot_long <- melt(to_dotplot[,c(1,2)])
to_dotplot_long$ID <- factor(to_dotplot_long$ID, levels = unique(to_dotplot_long$ID))
to_dotplot_long$variable <- as.character(to_dotplot_long$variable)
ggplot(to_dotplot_long, aes(x = value, y = ID, size = abs(value))) +
geom_point(aes(colour = variable)) +
# scale_color_gradient2(low="blue", high="blue", midpoint = 0, mid = "blue") +
theme_minimal() + ggtitle("786-0 and 786-M1A versus HK2 metabolomic") +
geom_vline(xintercept = -2) +
geom_vline(xintercept = 2)
View(t_table)
mapping_table <- as.data.frame(read_csv("Dropbox/marco_metactivity/support/plasmax_name_to_kegg.txt"))
t_table$ID <- tolower(t_table$ID)
t_table$ID <- gsub(" ","",t_table$ID)
t_table <- t_table_metactivity_input_formater(metabolomic_t_table = t_table,
mapping_table = mapping_table,
affixes = c("c","l","x","m","e","n","r"))
save(t_table, file = "~/Dropbox/marco_metactivity/support/shASS1_t_Table.RData")
load("~/Dropbox/marco_metactivity/support/reaction_set_list_merged_SUC_noext.Rdata")
load("~/Dropbox/marco_metactivity/support/reaction_network_ASS1_SUC_no_cofac_noext.Rdata")
penalty <- 6
n <- length(unique(reaction_set_list_merged[[penalty]][,1]))
regulonNames = unique(reaction_set_list_merged[[penalty]][,1])[1:n]
regulons_df <- reaction_set_list_merged[[penalty]]
regulons_df <- regulons_df[regulons_df[,1] %in% unique(regulons_df[,1])[1:n],]
sum(unique(t_table[,1]) %in% unique(regulons_df$targets))
t_table <- t_table[t_table$KEGG %in% regulons_df$targets,]
mean_NES_df <- metactivity(metabolomic_t_table = t_table,
regulons_df = regulons_df,
compartment_pattern = "_[a-z]$",
k = 10000)
View(mean_NES_df)
#Import omnipath
url <- "http://omnipathdb.org/interactions?types=post_translational,transcriptional&datasets=omnipath,pathwayextra,dorothea&fields=sources,references,curation_effort,dorothea_level,type&genesymbols=yes"
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omni_network <- download_omnipath()
View(omni_network)
omni_network[omni_network$source_genesymbol == "ECM1" & omni_network$target_genesymbol == "NTE5"]
omni_network[omni_network$source_genesymbol == "ECM1" & omni_network$target_genesymbol == "NTE5",]
omni_network[omni_network$source_genesymbol == "ECM1" & omni_network$target_genesymbol == "NT5",]
omni_network[omni_network$source_genesymbol == "ECM1" & omni_network$target_genesymbol == "NT5E",]
omni_network[omni_network$source_genesymbol == "ECM1" & omni_network$target_genesymbol == "NT5E",]
library(readr)
Wang_network <- read_csv("Desktop/Wang_network",
col_names = FALSE)
View(Wang_network)
library(readr)
Wang_nodes <- read_csv("Desktop/Wang_nodes")
View(Wang_nodes)
library(readr)
CCRCC_CPTAC_Kinase_Activities <- as.data.frame(
read_delim("Dropbox/COSMOS/data/CPTAC/CCRCC_CPTAC_Kinase_Activities.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
library(readr)
library(biomaRt)
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("Dropbox/COSMOS/support/meta_network_carnival_ready_exch_solved_fullomni_metfiltered.csv"))
ttop_CPTAC_CCRCC <- as.data.frame(
read_csv("Dropbox/COSMOS/data/CPTAC/CPTAC_CCRCC_Transcriptome_rpkm/ttop_CPTAC_CCRCC.csv"))
expressed_gene_list <- gsub("X","",ttop_CPTAC_CCRCC$ID)
##MAPPING
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
is_expressed <- function(x)
{
if(!grepl("Metab",x))
{
if(gsub("X","",x) %in% expressed_gene_list)
{
return(x)
} else
{
if(grepl("XGene[0-9]+__[0-9_]+$",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
if(grepl("XGene[0-9]+__[0-9_]+reverse",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- gsub("_reverse","",genes)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
return(x) #changed from NA to x to include reactions not associated with genes. Thanks Vitor.
}
}
}
} else
{
return(x)
}
}
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
library(readr)
library(biomaRt)
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("Dropbox/COSMOS/support/meta_network_carnival_ready_exch_solved_fullomni_metfiltered.csv"))
ttop_CPTAC_CCRCC <- as.data.frame(
read_csv("Dropbox/COSMOS/data/CPTAC/CPTAC_CCRCC_Transcriptome_rpkm/ttop_CPTAC_CCRCC.csv"))
expressed_gene_list <- gsub("X","",ttop_CPTAC_CCRCC$ID)
is_expressed <- function(x)
{
if(!grepl("Metab",x))
{
if(gsub("X","",x) %in% expressed_gene_list)
{
return(x)
} else
{
if(grepl("XGene[0-9]+__[0-9_]+$",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
if(grepl("XGene[0-9]+__[0-9_]+reverse",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- gsub("_reverse","",genes)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
return(NA) #changed from NA to x to include reactions not associated with genes. Thanks Vitor.
}
}
}
} else
{
return(x)
}
}
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
write_csv(meta_network_carnival_ready_exch_solved_fullomni,"~/Dropbox/COSMOS/support/meta_network_CCRCC_CPTAC_expfiltered.csv")
url <- paste0(
'http://omnipathdb.org/ptms?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath_ptm <- download_omnipath()
library(readr)
library(omicToolsTest)
library(vsn)
library(sva)
library(limma)
tableTopFormatter <- function(limma_result, coef, n)
{
ttop <- topTable(limma_result, coef = coef, number = n, adjust.method = "fdr")
ttop$ID <- row.names(ttop)
ttop <- ttop[,c(7,1,2,3,4,5,6)]
return(ttop)
}
###Pre-processing
metabolomic_df <- as.data.frame(read_csv("~/Dropbox/Marco/marco_multi_omic_integration/data/metabolomic_df.csv"))
targets <-as.data.frame(read_csv("~/Dropbox/Marco/marco_multi_omic_integration/support/metabolomic_targets.csv"))
row.names(metabolomic_df) <- metabolomic_df[,1]
metabolomic_df <- metabolomic_df[,-1]
batches <- metabolomic_df
##Normalisation
fit <- vsnMatrix(as.matrix(batches[,c(1:20)]))
meanSdPlot(fit)
batches[,c(1:20)] <- as.data.frame(vsn::predict(fit,as.matrix(batches[,c(1:20)])))
fit <- vsnMatrix(as.matrix(batches[,c(21:32)]))
meanSdPlot(fit)
batches[,c(21:32)] <- as.data.frame(vsn::predict(fit,as.matrix(batches[,c(21:32)])))
batches <- batches[rowSums(is.na(batches)) < 12,]
batches <- batches[,c(21:32)]
targets <- targets[targets$sample %in% names(batches),]
magicPlotMaker(batches, "~/Desktop/test", targets)
unique(targets$condition)
###Differential analysis
limmaRes <- runLimma(batches, targets, comparisons = list(c(2,-1), c(3,-2)))
ttop <- ttopFormatter(topTable(limmaRes[[1]], coef = 1, number = 70, adjust.method = "fdr"))
View(ttop)
View(targets)
tableTopFormatter <- function(limma_result, coef, n)
{
ttop <- topTable(limma_result, coef = coef, number = n)
ttop$ID <- row.names(ttop)
ttop <- ttop[,c(7,1,2,3,4,5,6)]
return(ttop)
}
library(readr)
library(dplyr)
###Pre-p;rocessing
Phospho_STY_Sites <- as.data.frame(read_delim("~/Dropbox/Marco/marco_multi_omic_integration/data/Phospho (STY)Sites.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
Phospho_STY_Sites$`Gene names` <- gsub("[;].*","",Phospho_STY_Sites$`Gene names`)
Phospho_STY_Sites$`Positions within proteins` <- gsub("[;].*","",Phospho_STY_Sites$`Positions within proteins`)
phospho <- as.data.frame(Phospho_STY_Sites[,c(8,150,161,167,168,169,170,171,172,173,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166)])
plot(hist(phospho$`Localization prob`, breaks = 100))
phospho <- as.data.frame(Phospho_STY_Sites[,c(150,161,167,168,169,170,171,172,173,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166)])
Phospho_STY_Sites$ID <- apply(Phospho_STY_Sites[ , c(6,112) ] , 1 , paste , collapse = "_" )
Phospho_STY_Sites$ID <- apply(Phospho_STY_Sites[ , c(364,2) ] , 1 , paste , collapse = "" )
phospho$ID <- Phospho_STY_Sites$ID
length(unique(phospho$ID)) - length(phospho$ID)
batches <- phospho
batches <- batches %>% group_by(ID) %>% summarise_each(funs(sum(., na.rm = TRUE)))
batches <- as.data.frame(batches)
row.names(batches) <- batches$ID
batches <- batches[,-1]
library(omicToolsTest)
batches[batches == 0] <- NA
batches <- batches[rowSums(is.na(batches)) < 22,]
names(batches) <- c("HK2_1","HK2_2","HK2_3","HK2_4","HK2_5",
"786-O+EV_1","786-O+EV_2","786-O+EV_3","786-O+EV_4","786-O+EV_5",
"786-O+VHL_1","786-O+VHL_2","786-O+VHL_3","786-O+VHL_4","786-O+VHL_5",
"786-M1A+EV_1","786-M1A+EV_2","786-M1A+EV_3","786-M1A+EV_4","786-M1A+EV_5",
"786-M1A+VHL_2","786-M1A+VHL_3","786-M1A+VHL_4","786-M1A+VHL_5")
targets <- as.data.frame(matrix(NA,ncol = 2, nrow = 24))
names(targets) <- c("sample","condition")
targets$sample <- names(batches)
targets$condition<- c(rep("HK2", 5), rep("786-O+EV",5), rep("786-O+VHL",5), rep("786-M1A+EV", 5), rep("786-M1A+VHL",4))
###Normalisation
library(vsn)
fit <- vsnMatrix(as.matrix(batches))
meanSdPlot(fit)
batches <- as.data.frame(vsn::predict(fit,as.matrix(batches)))
sub_batches <- batches[,names(batches) %in% targets[targets$condition %in% c("786-O+EV","786-M1A+EV"), 1]]
sub_target <- targets[targets$condition %in% c("786-O+EV","786-M1A+EV"), ]
#magicPlotMaker(batches, "~/Dropbox/Marco/marco_multi_omic_integration/visualisation/phospho/vsn/",targets)
magicPlotMaker(sub_batches, "~/Dropbox/Marco/marco_multi_omic_integration/visualisation/phospho/vsn/M1AvO_only/",sub_target)
###Differential analysis
library(limma)
limma_res <- runLimma(batches, targets, comparisons = list(c(4,-2),c(5,-4),c(5,-2),c(5,-4,-4,2)))
ttop_M1AvO <- tableTopFormatter(limma_res[[1]], 1, 13760)
View(ttop_M1AvO)
df <- as.data.frame(cbind(c('a','b','b','c'),c('d','d_S234','f_4546','a')))
View(df)
pathways <- as.data.frame(cbind(c('a','b','c'), rep('pathway_A',3)))
View(pathways)
View(df)
df$mor <- c(1,1,1,-1)
names(df) <- c('regulator','target','mor')
names(pathways)[1] <- 'regulator'
pathway_targets <- merge(df,pathways, by = 'regulator')
View(pathway_targets)
pathway_targets <- pathway_targets[,c(4,2,3)]
View(df)
View(pathways)
View(pathway_targets)
library(readr)
#Import recon3D reaction network in sif format
reaction_network_recon3_no_cofact <- as.data.frame(read_csv("Dropbox/Meta_PKN/recon3D_netowrk/reaction_network_recon3_no_cofact.csv"))
#Import STITCH allosteric interactions in SIF format
STITCH_900_sif <- as.data.frame(read_csv("Dropbox/Meta_PKN/STITCH_network/STITCH_900_sif.csv"))
#Import omnipath
url <- "http://omnipathdb.org/interactions?types=post_translational,transcriptional&datasets=omnipath,pathwayextra,dorothea&fields=sources,references,curation_effort,dorothea_level,type&genesymbols=yes"
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omni_network <- download_omnipath()
omni_network <- omni_network[omni_network$consensus_stimulation != 0 | omni_network$consensus_inhibition != 0,]
omni_network <- omni_network[,c(3,4,9,10)]
omni_network$Interaction <- omni_network$consensus_stimulation - omni_network$consensus_inhibition
cons_0 <- omni_network[omni_network$Interaction == 0,]
omni_network <- omni_network[omni_network$Interaction != 0,]
cons_0$consensus_inhibition <- 0
cons_0$Interaction <- 1
omni_network <- as.data.frame(rbind(omni_network,cons_0))
cons_0$consensus_inhibition <- 1
cons_0$consensus_stimulation <- 0
cons_0$Interaction <- -1
omni_network <- as.data.frame(rbind(omni_network,cons_0))
omni_network <- omni_network[,c(1,5,2)]
View(omni_network)
library(readr)
#Import recon3D reaction network in sif format
reaction_network_recon3_no_cofact <- as.data.frame(read_csv("Dropbox/Meta_PKN/recon3D_netowrk/reaction_network_recon3_no_cofact.csv"))
#Import STITCH allosteric interactions in SIF format
STITCH_900_sif <- as.data.frame(read_csv("Dropbox/Meta_PKN/STITCH_network/STITCH_900_sif.csv"))
#Import omnipath
url <- "http://omnipathdb.org/interactions?types=post_translational,transcriptional&datasets=omnipath,pathwayextra,dorothea&fields=sources,references,curation_effort,dorothea_level,type&genesymbols=yes"
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omni_network <- download_omnipath()
View(omni_network)
View(omni_network)
library(CARNIVAL) # load CARNIVAL library
library(biomaRt)
library(gsubfn)
library(readr)
library(rpubchem)
library(stringr)
library(dplyr)
library(dorothea)
library(OmnipathR)
library(igraph)
library(jaccard)
library(pheatmap)
setwd("~/Dropbox/COSMOS_MSB/results/input_range/")
source("../../scripts/format_cosmos_res_function.R")
jaccard_distance <- function(x, y){length(intersect(x, y))/length(union(x, y))}
files <- list.files(".", recursive = T)
files <- files[grepl("doublerun_res",files)]
ori_file <- "../COSMOS_res_session.RData"
files <- c(ori_file,files)
metab_to_pubchem <- as.data.frame(read_csv("../../support/metab_to_pubchem.csv"))
carni_res_list <- list()
i <- 1
for(file in files)
{
print(i)
load(file)
cosmos_forward <- format_COSMOS_res(cosmos_res = CARNIVAL_Result_rerun,
metab_mapping = metab_to_pubchem,
measured_nodes = c(names(metab_input_carnival),names(signaling_input_carnival)),
omnipath_ptm = read_rds("../../support/omnipath_ptm.rds"), gene_mapping = "else")
cosmos_backward <- format_COSMOS_res(cosmos_res = CARNIVAL_Result_2,
metab_mapping = metab_to_pubchem,
measured_nodes = c(names(metab_input_carnival),names(signaling_input_carnival)),
omnipath_ptm = read_rds("../../support/omnipath_ptm.rds"), gene_mapping = "else")
run_index <- gsub("[/].*","",file)
run_index <- gsub("[.][.]","0",run_index)
full_sif <- as.data.frame(unique(rbind(cosmos_forward[[1]],cosmos_backward[[1]])))
full_att <- as.data.frame(unique(rbind(cosmos_forward[[2]][,-6],cosmos_backward[[2]][,-6])))
full_att <- unique(full_att[,c(1,6,7,8)])
full_att[duplicated(full_att$Nodes),]
full_att$Nodes <- gsub(",","_",full_att$Nodes)
full_sif$Node1 <- gsub(",","_",full_sif$Node1)
full_sif$Node2 <- gsub(",","_",full_sif$Node2)
full_sif$Weight <- as.numeric(full_sif$Weight)
full_sif <- full_sif %>%
group_by(Node1, Node2, Sign) %>%
summarise(Weight= sum(Weight))
full_sif[full_sif$Weight > 100, "Weight"] <- 100
full_att <- full_att[full_att$Nodes %in% full_sif$Node1 | full_att$Nodes %in% full_sif$Node2,]
carni_res_list[[i]] <- list(full_sif, full_att)
names(carni_res_list)[i] <- run_index
i <- i+1
}
source("../../scripts/COSMOS_functions.R")
source("../../scripts/piano_function.R")
#Load inputs
meta_network <- as.data.frame(
read_csv("../../support/metaPKN_filtered.csv"))
prots <- unique(c(meta_network$source,meta_network$target))
prots <- prots[!grepl("XMetab",prots)]
prots <- gsub("^X","",prots)
prots <- gsub("Gene[0-9]+__","",prots)
prots <- gsub("_reverse","",prots)
prots <- gsub("EXCHANGE.*","",prots)
prots <- unique(prots)
prots <- unlist(sapply(prots, function(x){unlist(strsplit(x,split = "_"))}))
gene_mapping <- "ensembl"
if(gene_mapping == "ensembl")
{
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "entrezgene_id",
attributes = c('hgnc_symbol','entrezgene_id', "description"),
values = prots, mart = ensembl)
} else
{
G_list <- as.data.frame(read_csv(gene_mapping))
}
gene_mapping <- "else"
if(gene_mapping == "ensembl")
{
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "entrezgene_id",
attributes = c('hgnc_symbol','entrezgene_id', "description"),
values = prots, mart = ensembl)
} else
{
entrezid <- prots
gene_mapping <- mapIds(org.Hs.eg.db, entrezid, 'SYMBOL', 'ENTREZID')
gene_mapping <- unlist(gene_mapping)
gene_mapping <- gene_mapping[!is.na(gene_mapping)]
}
gene_mapping <- G_list[,1]
gene_mapping <- "else"
if(gene_mapping == "ensembl")
{
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "entrezgene_id",
attributes = c('hgnc_symbol','entrezgene_id', "description"),
values = prots, mart = ensembl)
gene_mapping <- G_list[,1]
names(gene_mapping) <- G_list[,2]
} else
{
entrezid <- prots
gene_mapping <- mapIds(org.Hs.eg.db, entrezid, 'SYMBOL', 'ENTREZID')
gene_mapping <- unlist(gene_mapping)
gene_mapping <- gene_mapping[!is.na(gene_mapping)]
}
background <- sapply(prots, function(x, translation_dictionary){
return(translation_dictionary[x])
},translation_dictionary = gene_mapping)
names(background) <- 1:length(background)
background <- unique(background)
hallmarks <- gmt_to_df("../../../support/h.all.v7.1.symbols.gmt_20200709.gmt")
hallmarks <- gmt_to_df("../../support/h.all.v7.1.symbols.gmt_20200709.gmt")
ORA_res_list <- lapply(carni_res_list, function(x)
{
nodes <- unique(x[[2]]$Nodes)
ora_res <- runGSAhyper(nodes, universe = background, gsc = loadGSC(hallmarks))
return(ora_res)
})
oraCor_vec <- lapply(ORA_res_list,function(x,ORA_res_list){
jc <- lapply(ORA_res_list, function(y, x){
ora_A <- as.data.frame(x$pvalues)
ora_B <- as.data.frame(y$pvalues)
ora_A$pathway <- row.names(ora_A)
ora_B$pathway <- row.names(ora_B)
ora_comp <- merge(ora_A, ora_B, by = "pathway")
return(cor(ora_comp[,2], ora_comp[,3]))
}, x = x)
}, ORA_res_list = ORA_res_list)
oraCor_matrix <- as.data.frame(do.call(cbind,oraCor_vec))
oraCor_matrix <- oraCor_matrix[order(as.numeric(row.names(oraCor_matrix))),]
oraCor_matrix <- oraCor_matrix[,order(as.numeric(names(oraCor_matrix)))]
oraCor_matrix <- as.data.frame(apply(oraCor_matrix,2,as.numeric))
row.names(oraCor_matrix) <- names(oraCor_matrix)
pheatmap(oraCor_matrix, cluster_rows = F, cluster_cols = F, display_numbers = T)
