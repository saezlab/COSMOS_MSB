names(df) <- names(experiment_paired_fastq_spreadsheet_template)
View(df)
files <- list.files("/Volumes/kramann/RNASeq_COSMOS_IMPORTANT")
r1 <- files[grepl("R1_001.fastq",files)]
r1
r1 <- files[grepl("R1_001.fastq.gz$",files)]
r2 <- files[grepl("R2_001.fastq.gz$",files)]
df$forward_file_name <- r1
df$reverse_file_name <- r2
View(df)
df$instrument_model <- "Illumina NovaSeq 6000"
df$library_source <- "TRANSCRIPTOMIC"
df$library_selection <- "RANDOM"
df$library_strategy <- "RNA-Seq"
df$insert_size <- 400
df$forward_file_name <- r1
df$reverse_file_name <- r2
df$sample_alias <- gsub("_.*","",df$forward_file_name)
write_tsv(df, path = "~/Dropbox/COSMOS_MSB/support/RNAseq_files_submission_info.tsv")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("BiRewire")
library(BiRewire)
library(readr)
test <- readRDS("~/Dropbox/COSMOS_MSB/support/shuffled_dsg_list.Rds")
test <- readRDS("~/Dropbox/COSMOS_MSB/support/rewired_net_1000_1000.Rds")
?birewire.rewire.dsg
library(BiRewire)
?birewire.rewire.dsg
?birewire.save.dsg
test <- readRDS("~/Dropbox/COSMOS_MSB/support/rewired_net_1000_1000.Rds")
test <- birewire.build.dsg(test)
library(CARNIVAL) # load CARNIVAL library
library(biomaRt)
library(gsubfn)
library(readr)
library(rpubchem)
library(stringr)
library(dplyr)
library(dorothea)
library(OmnipathR)
library(igraph)
library(jaccard)
library(pheatmap)
library(ggplot2)
library(reshape2)
setwd("~/Dropbox/COSMOS_MSB/results/shuffler/")
source("../../scripts/format_cosmos_res_function.R")
jaccard_distance <- function(x, y){length(intersect(x, y))/length(union(x, y))}
files <- list.files(".", recursive = T)
files <- files[grepl("doublerun_res",files)]
ori_file <- "../COSMOS_result/COSMOS_res_session.RData"
files <- c(ori_file,files)
metab_to_pubchem <- as.data.frame(read_csv("../../support/metab_to_pubchem.csv"))
carni_res_list <- list()
i <- 1
for(file in files)
{
print(i)
load(file)
cosmos_forward <- format_COSMOS_res(cosmos_res = CARNIVAL_Result_rerun,
metab_mapping = metab_to_pubchem,
measured_nodes = c(names(metab_input_carnival),names(signaling_input_carnival)),
omnipath_ptm = read_rds("../../support/omnipath_ptm.rds"), gene_mapping = "else")
cosmos_backward <- format_COSMOS_res(cosmos_res = CARNIVAL_Result_2,
metab_mapping = metab_to_pubchem,
measured_nodes = c(names(metab_input_carnival),names(signaling_input_carnival)),
omnipath_ptm = read_rds("../../support/omnipath_ptm.rds"), gene_mapping = "else")
run_index <- gsub("[/].*","",file)
run_index <- gsub("[.][.]","0",run_index)
carni_res_list[[i]] <- list(cosmos_forward, cosmos_backward)
names(carni_res_list)[i] <- run_index
i <- i+1
}
View(carni_res_list)
ori_sif <- carni_res_list[['0']][[1]][[1]]
View(ori_sif)
ori_sif_for <- carni_res_list[['0']][[1]][[1]]
test <- carni_res_list[-1]
View(test)
ori_carni_res <- carni_res_list[['0']]
carni_res_list <- carni_res_list[-1]
delta_list_forward <- lapply(carni_res_list, function(x, ori_carni_res){
forward_shuffle <- x[[1]][[1]]
forward_shuffle$Weight <- as.numeric(forward_shuffle$Weight)
forward_shuffle$edgeIDs <- paste0(forward_shuffle$Node1, '______', forward_shuffle$Sign, '______', forward_shuffle$Node2)
forward_shuffle <- forward_shuffle[,c(5,4)]
forward_shuffle <- aggregate(Weight ~ edgeIDs, forward_shuffle, sum)
forward_ori <- ori_carni_res[[1]][[1]]
forward_ori$Weight <- as.numeric(forward_ori$Weight)
forward_ori$edgeIDs <- paste0(forward_ori$Node1, '______', forward_ori$Sign, '______', forward_ori$Node2)
forward_ori <- forward_ori[,c(5,4)]
forward_ori <- aggregate(Weight ~ edgeIDs, forward_ori, sum)
delta_df <- merge(forward_ori, forward_shuffle, by = 'edgeIDs', all = T)
delta_df[is.na(delta_df)] <- 0
delta_df$delta <- abs(delta_df$Weight.x - delta_df$Weight.y)
return(delta_df)
})
delta_list_forward <- lapply(carni_res_list, function(x, ori_carni_res){
forward_shuffle <- x[[1]][[1]]
forward_shuffle$Weight <- as.numeric(forward_shuffle$Weight)
forward_shuffle$edgeIDs <- paste0(forward_shuffle$Node1, '______', forward_shuffle$Sign, '______', forward_shuffle$Node2)
forward_shuffle <- forward_shuffle[,c(5,4)]
forward_shuffle <- aggregate(Weight ~ edgeIDs, forward_shuffle, sum)
forward_ori <- ori_carni_res[[1]][[1]]
forward_ori$Weight <- as.numeric(forward_ori$Weight)
forward_ori$edgeIDs <- paste0(forward_ori$Node1, '______', forward_ori$Sign, '______', forward_ori$Node2)
forward_ori <- forward_ori[,c(5,4)]
forward_ori <- aggregate(Weight ~ edgeIDs, forward_ori, sum)
delta_df <- merge(forward_ori, forward_shuffle, by = 'edgeIDs', all = T)
delta_df[is.na(delta_df)] <- 0
delta_df$delta <- abs(delta_df$Weight.x - delta_df$Weight.y)
return(delta_df)
}, ori_carni_res = ori_carni_res)
View(delta_list_forward)
plot(density(delta_list_forward$`10`$delta))
View(delta_list_forward$`10`$delta)
View(delta_list_forward$`10`)
delta_list_forward <- lapply(carni_res_list, function(x, ori_carni_res){
forward_shuffle <- x[[1]][[1]]
forward_shuffle$Weight <- as.numeric(forward_shuffle$Weight)
forward_shuffle$edgeIDs <- paste0(forward_shuffle$Node1, '______', forward_shuffle$Sign, '______', forward_shuffle$Node2)
forward_shuffle <- forward_shuffle[,c(5,4)]
forward_shuffle <- aggregate(Weight ~ edgeIDs, forward_shuffle, sum)
forward_shuffle$Weight <- ifelse(forward_shuffle$Weight  > 100, 100, forward_shuffle$Weight)
forward_ori <- ori_carni_res[[1]][[1]]
forward_ori$Weight <- as.numeric(forward_ori$Weight)
forward_ori$edgeIDs <- paste0(forward_ori$Node1, '______', forward_ori$Sign, '______', forward_ori$Node2)
forward_ori <- forward_ori[,c(5,4)]
forward_ori <- aggregate(Weight ~ edgeIDs, forward_ori, sum)
forward_ori$Weight <- ifelse(forward_ori$Weight  > 100, 100, forward_ori$Weight)
delta_df <- merge(forward_ori, forward_shuffle, by = 'edgeIDs', all = T)
delta_df[is.na(delta_df)] <- 0
delta_df$delta <- abs(delta_df$Weight.x - delta_df$Weight.y)
return(delta_df)
}, ori_carni_res = ori_carni_res)
plot(density(delta_list_forward$`10`$delta))
library(CARNIVAL) # load CARNIVAL library
library(biomaRt)
library(gsubfn)
library(readr)
library(rpubchem)
library(stringr)
library(dplyr)
library(dorothea)
library(OmnipathR)
library(igraph)
library(jaccard)
library(pheatmap)
library(ggplot2)
library(reshape2)
setwd("~/Dropbox/COSMOS_MSB/results/shuffler/")
source("../../scripts/format_cosmos_res_function.R")
jaccard_distance <- function(x, y){length(intersect(x, y))/length(union(x, y))}
files <- list.files(".", recursive = T)
files <- files[grepl("doublerun_res",files)]
ori_file <- "../COSMOS_result/COSMOS_res_session.RData"
files <- c(ori_file,files)
metab_to_pubchem <- as.data.frame(read_csv("../../support/metab_to_pubchem.csv"))
carni_res_list <- list()
i <- 1
for(file in files)
{
print(i)
load(file)
cosmos_forward <- format_COSMOS_res(cosmos_res = CARNIVAL_Result_rerun,
metab_mapping = metab_to_pubchem,
measured_nodes = c(names(metab_input_carnival),names(signaling_input_carnival)),
omnipath_ptm = read_rds("../../support/omnipath_ptm.rds"), gene_mapping = "else")
cosmos_backward <- format_COSMOS_res(cosmos_res = CARNIVAL_Result_2,
metab_mapping = metab_to_pubchem,
measured_nodes = c(names(metab_input_carnival),names(signaling_input_carnival)),
omnipath_ptm = read_rds("../../support/omnipath_ptm.rds"), gene_mapping = "else")
run_index <- gsub("[/].*","",file)
run_index <- gsub("[.][.]","0",run_index)
carni_res_list[[i]] <- list(cosmos_forward, cosmos_backward, run_index)
names(carni_res_list)[i] <- run_index
i <- i+1
}
ori_carni_res <- carni_res_list[['0']]
carni_res_list <- carni_res_list[-1]
delta_list_forward <- lapply(carni_res_list, function(x, ori_carni_res){
forward_shuffle <- x[[1]][[1]]
forward_shuffle$Weight <- as.numeric(forward_shuffle$Weight)
forward_shuffle$edgeIDs <- paste0(forward_shuffle$Node1, '______', forward_shuffle$Sign, '______', forward_shuffle$Node2)
forward_shuffle <- forward_shuffle[,c(5,4)]
forward_shuffle <- aggregate(Weight ~ edgeIDs, forward_shuffle, sum)
forward_shuffle$Weight <- ifelse(forward_shuffle$Weight  > 100, 100, forward_shuffle$Weight)
forward_ori <- ori_carni_res[[1]][[1]]
forward_ori$Weight <- as.numeric(forward_ori$Weight)
forward_ori$edgeIDs <- paste0(forward_ori$Node1, '______', forward_ori$Sign, '______', forward_ori$Node2)
forward_ori <- forward_ori[,c(5,4)]
forward_ori <- aggregate(Weight ~ edgeIDs, forward_ori, sum)
forward_ori$Weight <- ifelse(forward_ori$Weight  > 100, 100, forward_ori$Weight)
delta_df <- merge(forward_ori, forward_shuffle, by = 'edgeIDs', all = T)
delta_df[is.na(delta_df)] <- 0
delta_df$delta <- abs(delta_df$Weight.x - delta_df$Weight.y)
delta_df$index <- x[[3]]
return(delta_df)
}, ori_carni_res = ori_carni_res)
View(delta_list_forward)
View(delta_list_forward)
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
View(delta_df_for)
ggplot(delta_df_for, aes(x = edgeIDs, y = delta, group = index, fill = index)) + geom_boxplot()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) + geom_boxplot()
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) + geom_boxplot()
View(delta_df_for)
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
delta_df_for$index <- as.numeric(delta_df_for$index)
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) + geom_boxplot()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) + geom_violin()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) + geom_boxplot()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot() +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot() +
geom_jitter(width=0.1,alpha=0.2)
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot() +
geom_jitter(width=0.3,alpha=0.2)
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot() +
geom_jitter(width=0.2,alpha=0.2)
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot() +
geom_jitter(width=0.2,alpha=0.2) +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = 'grey') +
geom_jitter(width=0.2,alpha=0.2) +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = 'lightblue') +
geom_boxplot(width=0.1) +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = 'lightblue') +
geom_boxplot(width=0.1, fill = 'white') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin() +
geom_boxplot(width=0.1, fill = 'white') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = 'darkgrey') +
geom_boxplot(width=0.1, fill = 'white') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = 'darkgrey') +
geom_boxplot(width=0.1, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = 'blue') +
geom_boxplot(width=0.1, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = 'lightblue') +
geom_boxplot(width=0.1, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = 'lightblue') +
geom_boxplot(width=0.05, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot() +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=mean, geom="point", shape=23, size=2) +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, size=2) +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, size=2, fill = 'whie') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, size=2, fill = 'white') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, size=4, fill = 'white') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, size=4, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
delta_list_backward <- lapply(carni_res_list, function(x, ori_carni_res){
backward_shuffle <- x[[2]][[1]]
backward_shuffle$Weight <- as.numeric(backward_shuffle$Weight)
backward_shuffle$edgeIDs <- paste0(backward_shuffle$Node1, '______', backward_shuffle$Sign, '______', backward_shuffle$Node2)
backward_shuffle <- backward_shuffle[,c(5,4)]
backward_shuffle <- aggregate(Weight ~ edgeIDs, backward_shuffle, sum)
backward_shuffle$Weight <- ifelse(backward_shuffle$Weight  > 100, 100, backward_shuffle$Weight)
backward_ori <- ori_carni_res[[2]][[1]]
backward_ori$Weight <- as.numeric(backward_ori$Weight)
backward_ori$edgeIDs <- paste0(backward_ori$Node1, '______', backward_ori$Sign, '______', backward_ori$Node2)
backward_ori <- backward_ori[,c(5,4)]
backward_ori <- aggregate(Weight ~ edgeIDs, backward_ori, sum)
backward_ori$Weight <- ifelse(backward_ori$Weight  > 100, 100, backward_ori$Weight)
delta_df <- merge(backward_ori, backward_shuffle, by = 'edgeIDs', all = T)
delta_df[is.na(delta_df)] <- 0
delta_df$delta <- abs(delta_df$Weight.x - delta_df$Weight.y)
delta_df$index <- x[[3]]
return(delta_df)
}, ori_carni_res = ori_carni_res)
delta_df_for <- as.data.frame(do.call(rbind, delta_list_backward))
delta_df_for$index <- as.numeric(delta_df_for$index)
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = 'lightblue') +
geom_boxplot(width=0.1, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = "lightblue") +
geom_boxplot(width=0.1, fill = 'lightgrey') +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
delta_list_forward <- lapply(carni_res_list, function(x, ori_carni_res){
forward_shuffle <- x[[1]][[1]]
forward_shuffle$Weight <- as.numeric(forward_shuffle$Weight)
forward_shuffle$edgeIDs <- paste0(forward_shuffle$Node1, '______', forward_shuffle$Sign, '______', forward_shuffle$Node2)
forward_shuffle <- forward_shuffle[,c(5,4)]
forward_shuffle <- aggregate(Weight ~ edgeIDs, forward_shuffle, sum)
forward_shuffle$Weight <- ifelse(forward_shuffle$Weight  > 100, 100, forward_shuffle$Weight)
forward_ori <- ori_carni_res[[1]][[1]]
forward_ori$Weight <- as.numeric(forward_ori$Weight)
forward_ori$edgeIDs <- paste0(forward_ori$Node1, '______', forward_ori$Sign, '______', forward_ori$Node2)
forward_ori <- forward_ori[,c(5,4)]
forward_ori <- aggregate(Weight ~ edgeIDs, forward_ori, sum)
forward_ori$Weight <- ifelse(forward_ori$Weight  > 100, 100, forward_ori$Weight)
delta_df <- merge(forward_ori, forward_shuffle, by = 'edgeIDs', all = T)
delta_df[is.na(delta_df)] <- 0
delta_df$delta <- abs(delta_df$Weight.x - delta_df$Weight.y)
delta_df$index <- x[[3]]
return(delta_df)
}, ori_carni_res = ori_carni_res)
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
delta_df_for$index <- as.numeric(delta_df_for$index)
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for <- delta_df_for[delta_df_for$index %in% c(2,10,20,30)]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
delta_df_for$index
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
delta_df_for$index <- as.numeric(delta_df_for$index)
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for$index %in%
sdsdsd
delta_df_for$index
delta_df_for$index %in% c(2,10,20,30)
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
delta_df_for$index <- as.numeric(delta_df_for$index)
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for <- delta_df_for[delta_df_for$index %in% c(2,10,20,30),]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
delta_df_for$index <- as.numeric(delta_df_for$index)
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for <- delta_df_for[delta_df_for$index %in% c(2,10,20,30,40,50),]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
delta_df_back <- as.data.frame(do.call(rbind, delta_list_backward))
delta_df_back$index <- as.numeric(delta_df_back$index)
delta_df_back <- delta_df_back[order(delta_df_back$index, decreasing = F),]
delta_df_back <- delta_df_back[delta_df_back$index %in% c(2,10,20,30,40,50),]
delta_df_back$index <- factor(delta_df_back$index, levels = unique(delta_df_back$index))
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_violin(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(aplha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey', size = 4) +
theme_minimal()
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey', size = 4) +
theme_minimal() +
ggtitle('Forward COSMOS weight comparison')
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey', size = 4) +
theme_minimal() +
ggtitle('Forward COSMOS weight comparison') +
xlab('% of edges shuffled') +
ylab("Absolute edge weight difference")
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()  +
ggtitle('Backward COSMOS weight comparison') +
xlab('% of edges shuffled') +
ylab("Absolute edge weight difference")
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
delta_df_for$index <- as.numeric(delta_df_for$index)
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for <- delta_df_for[delta_df_for$index %in% c(2,4,8,16,32,50),]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey', size = 4) +
theme_minimal() +
ggtitle('Forward COSMOS weight comparison') +
xlab('% of edges shuffled') +
ylab("Absolute edge weight difference")
delta_df_for <- delta_df_for[delta_df_for$index %in% c(2,4,10,16,24,50),]
delta_df_for <- as.data.frame(do.call(rbind, delta_list_forward))
delta_df_for$index <- as.numeric(delta_df_for$index)
delta_df_for <- delta_df_for[order(delta_df_for$index, decreasing = F),]
delta_df_for <- delta_df_for[delta_df_for$index %in% c(2,4,10,16,24,50),]
delta_df_for$index <- factor(delta_df_for$index, levels = unique(delta_df_for$index))
ggplot(delta_df_for, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey', size = 4) +
theme_minimal() +
ggtitle('Forward COSMOS weight comparison') +
xlab('% of edges shuffled') +
ylab("Absolute edge weight difference")
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey') +
theme_minimal()  +
ggtitle('Backward COSMOS weight comparison') +
xlab('% of edges shuffled') +
ylab("Absolute edge weight difference")
ggplot(delta_df_back, aes(x = index, y = delta, group = index, fill = index)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.2) +
stat_summary(fun.y=median, geom="point", shape=23, fill = 'lightgrey', size = 4) +
theme_minimal()  +
ggtitle('Backward COSMOS weight comparison') +
xlab('% of edges shuffled') +
ylab("Absolute edge weight difference")
