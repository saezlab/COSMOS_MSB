network_plot <- display_node_neighboorhood(central_node = 'NFKB1',
sif = full_sif,
att = full_attributes,
n = 7)
network_plot
remove.packages(carnival)
remove.packages(CARNIVAL)
remove.packages(lib = "CARNIVAL")
remove.packages("CARNIVAL")
devtools::install_github("saezlab/CARNIVAL")
knitr::opts_chunk$set(echo = TRUE)
library(cosmosR)
CARNIVAL_options <- cosmosR::default_CARNIVAL_options()
# CARNIVAL_options$solverPath <- "C:/Program Files/CPLEX_solver/cplex/bin/x64_win64/cplex.exe"
# CARNIVAL_options$solver <- "cplex" #or cbc
CARNIVAL_options$solverPath <- "~/Documents/cplex"
CARNIVAL_options$solver <- "cplex" #or cbc
# CARNIVAL_options$solver <- "lpSolve" #or cbc
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
data(toy_network)
data(toy_signaling_input)
data(toy_metabolic_input)
data(toy_RNA)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,
signaling_data = toy_signaling_input,
metabolic_data = toy_metabolic_input,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = TRUE,
CARNIVAL_options = CARNIVAL_options
)
knitr::opts_chunk$set(echo = TRUE)
library(cosmosR)
CARNIVAL_options <- cosmosR::default_CARNIVAL_options()
# CARNIVAL_options$solverPath <- "C:/Program Files/CPLEX_solver/cplex/bin/x64_win64/cplex.exe"
# CARNIVAL_options$solver <- "cplex" #or cbc
# CARNIVAL_options$solverPath <- "~/Documents/cplex"
# CARNIVAL_options$solver <- "cplex" #or cbc
CARNIVAL_options$solver <- "lpSolve" #or cbc
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
data(toy_network)
data(toy_signaling_input)
data(toy_metabolic_input)
data(toy_RNA)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,
signaling_data = toy_signaling_input,
metabolic_data = toy_metabolic_input,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = TRUE,
CARNIVAL_options = CARNIVAL_options
)
CARNIVAL_options$timelimit <- 14400
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = CARNIVAL_options)
View(test_for)
View(test_result_for)
library(readr)
TMT_Prot_Cell_Lines_proteinGroups <- read_delim("Desktop/TMT-Prot_Cell-Lines_proteinGroups.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(TMT_Prot_Cell_Lines_proteinGroups)
names(TMT_Prot_Cell_Lines_proteinGroups)
## Tutorial with a kidney cancer toy metabolomic dataset
library(ocean)
sub_network <- model_to_pathway_sif(pathway_to_keep = all_pathways$X1)
all_pathways <- unique(recon2_redhuman$pathway)
sub_network <- model_to_pathway_sif(pathway_to_keep = all_pathways$X1)
View(sub_network)
?model_to_pathway_sif
sub_network <- translate_complexes(sub_network)
split_transaminases
load(file = "Dropbox/recon3D_BIGG/result/recon3D_bigg_no_cofactor.csv")
library(readr)
recon3D_bigg_no_cofactor <- as.data.frame(
read_csv("Dropbox/recon3D_BIGG/result/recon3D_bigg_no_cofactor.csv"))
View(recon3D_bigg_no_cofactor)
install.packages("remotes")
remotes::install_github("dbdimitrov/BingleSeq")
library(BingleSeq)
startBingleSeq()
library(readr)
test <- read_csv("https://github.com/saezlab/recon3D_BIGG/blob/main/result/recon3D_bigg_no_cofactor.csv")
View(test)
library(RCurl)
x <- getURL("https://github.com/saezlab/recon3D_BIGG/blob/main/result/recon3D_bigg_no_cofactor.csv")
test <- read_csv(x)
y <- read.csv(text = x)
View(y)
x <- getURL("https://github.com/saezlab/recon3D_BIGG/blob/main/result/recon3D_bigg_no_cofactor.csv")
x <- getURL("https://github.com/saezlab/recon3D_BIGG/blob/main/result/recon3D_bigg_no_cofactor.csv")
x
x <- getURL("https://raw.githubusercontent.com/saezlab/recon3D_BIGG/main/result/recon3D_bigg_no_cofactor.csv")
test <- read_csv(x)
View(test)
library(cosmosR)
View(preprocess_COSMOS_signaling_to_metabolism())
View(preprocess_COSMOS_signaling_to_metabolism)
view(meta_network)
View(meta_network)
data(meta_network)
knitr::opts_chunk$set(echo = TRUE)
library(cosmosR)
CARNIVAL_options <- cosmosR::default_CARNIVAL_options()
# CARNIVAL_options$solverPath <- "C:/Program Files/CPLEX_solver/cplex/bin/x64_win64/cplex.exe"
# CARNIVAL_options$solver <- "cplex" #or cbc
# CARNIVAL_options$solverPath <- "~/Documents/cplex"
# CARNIVAL_options$solver <- "cplex" #or cbc
CARNIVAL_options$solver <- "lpSolve" #or cbc
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
knitr::opts_chunk$set(echo = TRUE)
library(cosmosR)
CARNIVAL_options <- cosmosR::default_CARNIVAL_options()
# CARNIVAL_options$solverPath <- "C:/Program Files/CPLEX_solver/cplex/bin/x64_win64/cplex.exe"
# CARNIVAL_options$solver <- "cplex" #or cbc
# CARNIVAL_options$solverPath <- "~/Documents/cplex"
# CARNIVAL_options$solver <- "cplex" #or cbc
CARNIVAL_options$solver <- "lpSolve" #or cbc
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
data(toy_network)
data(toy_signaling_input)
data(toy_metabolic_input)
data(toy_RNA)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,
signaling_data = toy_signaling_input,
metabolic_data = toy_metabolic_input,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = TRUE,
CARNIVAL_options = CARNIVAL_options
)
CARNIVAL_options$timelimit <- 14400
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = CARNIVAL_options)
data(metabolite_to_pubchem)
data(omnipath_ptm)
formated_result_for <- format_COSMOS_res(test_result_for,
metab_mapping = metabolite_to_pubchem,
measured_nodes = unique(c(names(toy_metabolic_input),
names(toy_signaling_input))),
omnipath_ptm = omnipath_ptm)
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
test_back <- preprocess_COSMOS_metabolism_to_signaling(meta_network = toy_network,
signaling_data = toy_signaling_input,
metabolic_data = toy_metabolic_input,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = FALSE,
CARNIVAL_options = CARNIVAL_options)
CARNIVAL_options$timelimit <- 28800
test_result_back <- run_COSMOS_metabolism_to_signaling(data = test_back,
CARNIVAL_options = CARNIVAL_options)
formated_result_back <- format_COSMOS_res(test_result_back,
metab_mapping = metabolite_to_pubchem,
measured_nodes = unique(c(names(toy_metabolic_input),
names(toy_signaling_input))),
omnipath_ptm = omnipath_ptm)
full_sif <- as.data.frame(rbind(formated_result_for[[1]], formated_result_back[[1]]))
full_attributes <- as.data.frame(rbind(formated_result_for[[2]], formated_result_back[[2]]))
full_sif <- unique(full_sif)
full_attributes <- unique(full_attributes)
View(full_sif)
network_plot <- display_node_neighboorhood(central_node = 'NFKB1',
sif = full_sif,
att = full_attributes,
n = 7)
View(full_attributes)
View(full_sif)
network_plot <- display_node_neighboorhood(central_node = 'GNAI3',
sif = full_sif,
att = full_attributes,
n = 7)
network_plot
# install the development version from GitHub
# install.packages("remotes")
remotes::install_github("saezlab/cosmosR")
knitr::opts_chunk$set(echo = TRUE)
library(cosmosR)
CARNIVAL_options <- cosmosR::default_CARNIVAL_options()
# CARNIVAL_options$solverPath <- "C:/Program Files/CPLEX_solver/cplex/bin/x64_win64/cplex.exe"
# CARNIVAL_options$solver <- "cplex" #or cbc
# CARNIVAL_options$solverPath <- "~/Documents/cplex"
# CARNIVAL_options$solver <- "cplex" #or cbc
CARNIVAL_options$solver <- "lpSolve" #or cbc
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
data(toy_network)
data(toy_signaling_input)
data(toy_metabolic_input)
data(toy_RNA)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,
signaling_data = toy_signaling_input,
metabolic_data = toy_metabolic_input,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = TRUE,
CARNIVAL_options = CARNIVAL_options
)
CARNIVAL_options$timelimit <- 14400
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = CARNIVAL_options)
data(metabolite_to_pubchem)
data(omnipath_ptm)
formated_result_for <- format_COSMOS_res(test_result_for,
metab_mapping = metabolite_to_pubchem,
measured_nodes = unique(c(names(toy_metabolic_input),
names(toy_signaling_input))),
omnipath_ptm = omnipath_ptm)
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
test_back <- preprocess_COSMOS_metabolism_to_signaling(meta_network = toy_network,
signaling_data = toy_signaling_input,
metabolic_data = toy_metabolic_input,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = FALSE,
CARNIVAL_options = CARNIVAL_options)
CARNIVAL_options$timelimit <- 28800
test_result_back <- run_COSMOS_metabolism_to_signaling(data = test_back,
CARNIVAL_options = CARNIVAL_options)
formated_result_back <- format_COSMOS_res(test_result_back,
metab_mapping = metabolite_to_pubchem,
measured_nodes = unique(c(names(toy_metabolic_input),
names(toy_signaling_input))),
omnipath_ptm = omnipath_ptm)
full_sif <- as.data.frame(rbind(formated_result_for[[1]], formated_result_back[[1]]))
full_attributes <- as.data.frame(rbind(formated_result_for[[2]], formated_result_back[[2]]))
full_sif <- unique(full_sif)
full_attributes <- unique(full_attributes)
network_plot <- display_node_neighboorhood(central_node = 'NFKB1',
sif = full_sif,
att = full_attributes,
n = 7)
network_plot
install.packages("rsconnect")
knitr::opts_chunk$set(echo = TRUE)
library(cosmosR)
CARNIVAL_options <- cosmosR::default_CARNIVAL_options()
# CARNIVAL_options$solverPath <- "C:/Program Files/CPLEX_solver/cplex/bin/x64_win64/cplex.exe"
# CARNIVAL_options$solver <- "cplex" #or cbc
# CARNIVAL_options$solverPath <- "~/Documents/cplex"
# CARNIVAL_options$solver <- "cplex" #or cbc
CARNIVAL_options$solver <- "lpSolve" #or cbc
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
data(toy_network)
data(toy_signaling_input)
data(toy_metabolic_input)
data(toy_RNA)
View(toy_network)
toy_signaling_input
toy_metabolic_input
data(toy_network)
data(toy_signaling_input)
data(toy_metabolic_input)
data(toy_RNA)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,
signaling_data = toy_signaling_input,
metabolic_data = toy_metabolic_input,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = TRUE,
CARNIVAL_options = CARNIVAL_options
)
CARNIVAL_options$timelimit <- 14400
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = CARNIVAL_options)
data(metabolite_to_pubchem)
data(omnipath_ptm)
formated_result_for <- format_COSMOS_res(test_result_for,
metab_mapping = metabolite_to_pubchem,
measured_nodes = unique(c(names(toy_metabolic_input),
names(toy_signaling_input))),
omnipath_ptm = omnipath_ptm)
View(formated_result_for)
View(formated_result_for[[1]])
View(formated_result_for[[2]])
CARNIVAL_options$timelimit <- 3600
CARNIVAL_options$mipGAP <- 0.05
CARNIVAL_options$threads <- 2
test_back <- preprocess_COSMOS_metabolism_to_signaling(meta_network = toy_network,
signaling_data = toy_signaling_input,
metabolic_data = toy_metabolic_input,
diff_expression_data = toy_RNA,
maximum_network_depth = 15,
remove_unexpressed_nodes = FALSE,
CARNIVAL_options = CARNIVAL_options)
CARNIVAL_options$timelimit <- 28800
test_result_back <- run_COSMOS_metabolism_to_signaling(data = test_back,
CARNIVAL_options = CARNIVAL_options)
formated_result_back <- format_COSMOS_res(test_result_back,
metab_mapping = metabolite_to_pubchem,
measured_nodes = unique(c(names(toy_metabolic_input),
names(toy_signaling_input))),
omnipath_ptm = omnipath_ptm)
View(formated_result_back[[1]])
full_sif <- as.data.frame(rbind(formated_result_for[[1]], formated_result_back[[1]]))
full_attributes <- as.data.frame(rbind(formated_result_for[[2]], formated_result_back[[2]]))
full_sif <- unique(full_sif)
full_attributes <- unique(full_attributes)
View(full_sif)
network_plot <- display_node_neighboorhood(central_node = 'NFKB1',
sif = full_sif,
att = full_attributes,
n = 7)
network_plot
network_plot <- display_node_neighboorhood(central_node = 'ADORA2B',
sif = full_sif,
att = full_attributes,
n = 7)
network_plot
toy_signaling_input
head(toy_RNA)
toy_metabolic_input
library(dorothea)
View(dorothea_hs)
data(bcellViper, package="bcellViper")
View(regulon)
plot(regulon$ADNP$tfmode, regulon$ADNP$likelihood)
regulon$ADNP$likelihood
plot(regulon$ADNP$tfmode, regulon$ADNP$likelihood)
plot(x = as.numeric(regulon$ADNP$tfmode), y = as.numeric()regulon$ADNP$likelihood)
plot(x = as.numeric(regulon$ADNP$tfmode), y = as.numeric(regulon$ADNP$likelihood))
library(readr)
GSE171955_Nakken_et_al_Processed <- read_delim("Desktop/GSE171955_Nakken_et_al_Processed.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(GSE171955_Nakken_et_al_Processed)
plot(GSE171955_Nakken_et_al_Processed[which[GSE171955_Nakken_et_al_Processed$symbol == "ASS1",4:27]])
plot(GSE171955_Nakken_et_al_Processed[which[GSE171955_Nakken_et_al_Processed$symbol == "ASS1"],4:27])
GSE171955_Nakken_et_al_Processed <- as.data.frame(GSE171955_Nakken_et_al_Processed)
plot(GSE171955_Nakken_et_al_Processed[which[GSE171955_Nakken_et_al_Processed$symbol == "ASS1"],4:27])
GSE171955_Nakken_et_al_Processed[which[GSE171955_Nakken_et_al_Processed$symbol == "ASS1"],4:27]
plot(GSE171955_Nakken_et_al_Processed[which(GSE171955_Nakken_et_al_Processed$symbol == "ASS1"),4:27])
GSE171955_Nakken_et_al_Processed[which(GSE171955_Nakken_et_al_Processed$symbol == "ASS1"),4:27]
plot(as.numeric(GSE171955_Nakken_et_al_Processed[which(GSE171955_Nakken_et_al_Processed$symbol == "ASS1"),4:27]))
plot(as.numeric(colSums(GSE171955_Nakken_et_al_Processed[,4:27])))
library(readr)
GSE171955_Nakken_et_al_Processed <- as.data.frame(
read_delim("Desktop/GSE171955_Nakken_et_al_Processed.txt", delim = "\t", escape_double = FALSE, trim_ws = TRUE))
targets <- as.data.frame(matrix(NA, nrow = 24, ncol = 2))
names(targets) <- c("sample","condition")
library(readr)
counts <- as.data.frame(
read_delim("Desktop/GSE171955_Nakken_et_al_Processed.txt", delim = "\t", escape_double = FALSE, trim_ws = TRUE))
targets <- as.data.frame(matrix(NA, nrow = 24, ncol = 2))
names(targets) <- c("sample","condition")
library(readr)
counts <- as.data.frame(
read_delim("Desktop/GSE171955_Nakken_et_al_Processed.txt", delim = "\t", escape_double = FALSE, trim_ws = TRUE))
targets <- as.data.frame(matrix(NA, nrow = 24, ncol = 2))
names(targets) <- c("sample","condition")
View(counts)
targets$sample <- nameS(counts[,-c(1:3)])
targets$sample <- names(counts[,-c(1:3)])
View(targets)
targets$condition <- c("M","M","M","C","M","M","C","M","M","C","M",rep("C",11))
targets$condition <- c("M","M","M","C","M","M","C","M","M","C","M",rep("C",13))
View(targets)
source("Dropbox/marco_metactivity/scripts/support_functions.R")
View(counts)
row.names(counts) <- counts$symbol
row.names(counts) <- counts$`ENSEMBL Human`
mapping <- counts[,c(1,2)]
View(mapping)
counts <- counts[,-c(1:3)]
unique(targets$condition)
comparisons <- list(c("MvsCtrl" = c(1,-2)))
limmaRes <- runLimma(counts, targets = targets, comparisons = comparisons)
library(limma)
limmaRes <- runLimma(counts, targets = targets, comparisons = comparisons)
limmaRes_df <- ttopFormatter(topTable(limmaRes,coef = 1, number = 18942, adjust.method = "fdr"))
limmaRes_df <- ttopFormatter(topTable(limmaRes[[1]],coef = 1, number = 18942, adjust.method = "fdr"))
View(limmaRes_df)
View(mapping)
View(limmaRes_df)
library(GEOquery)
install.packages("library(GEOquery)")
library(readr)
library(stringr)
library('org.Hs.eg.db')
setwd("~/Dropbox/COSMOS_MSB//")
#### Preparation des input metabolomic
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("data/metab_ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("support/metab_to_kegg.txt"))
meta_network_with_X <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
kegg_to_pubchem <- as.data.frame(
read_csv("support/kegg_to_pubchem_acofixed.txt",
col_names = FALSE))
View(ttop_tumour_vs_healthy)
View(metab_to_kegg)
library(readr)
library(stringr)
library('org.Hs.eg.db')
setwd("~/Dropbox/COSMOS_MSB//")
#### Preparation des input metabolomic
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("data/metab_ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("support/metab_to_kegg.txt"))
meta_network_with_X <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
kegg_to_pubchem <- as.data.frame(
read_csv("support/kegg_to_pubchem_acofixed.txt",
col_names = FALSE))
kegg_to_pubchem$X2 <- paste("XMetab__",kegg_to_pubchem$X2, sep = "")
compartment_codes <- unique(c(meta_network_with_X$source,meta_network_with_X$target))
compartment_codes <- compartment_codes[grepl("Metab",compartment_codes)]
compartment_codes <- unique(str_match(compartment_codes,"___.____"))
compartment_mapping <- list()
for(i in 1:length(compartment_codes))
{
df <- kegg_to_pubchem
df$X2 <- paste(df$X2, compartment_codes[i], sep = "")
compartment_mapping[[i]] <- df
}
compartment_mapping <- as.data.frame(do.call(rbind, compartment_mapping))
compartment_mapping <- compartment_mapping[
compartment_mapping$X2 %in% meta_network_with_X$source |
compartment_mapping$X2 %in% meta_network_with_X$target,
]
kegg_to_pubchem_with_comp <- compartment_mapping
names(kegg_to_pubchem_with_comp) <- c("KEGG","pubchem")
full_mapping <- merge(metab_to_kegg, kegg_to_pubchem_with_comp, by = "KEGG")
names(ttop_tumour_vs_healthy)[1] <- "metab_name"
ttop_tumour_vs_healthy$metab_name <- tolower(ttop_tumour_vs_healthy$metab_name)
full_mapping$metab_name <- tolower(full_mapping$metab_name)
ttop_tumour_vs_healthy <- merge(ttop_tumour_vs_healthy, full_mapping, by = "metab_name")
ttop_tumour_vs_healthy <- ttop_tumour_vs_healthy[,c(9,2:7)]
View(ttop_tumour_vs_healthy)
library(readr)
library(stringr)
library('org.Hs.eg.db')
setwd("~/Dropbox/COSMOS_MSB//")
#### Preparation des input metabolomic
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("data/metab_ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("support/metab_to_kegg.txt"))
meta_network_with_X <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
kegg_to_pubchem <- as.data.frame(
read_csv("support/kegg_to_pubchem_acofixed.txt",
col_names = FALSE))
kegg_to_pubchem$X2 <- paste("XMetab__",kegg_to_pubchem$X2, sep = "")
compartment_codes <- unique(c(meta_network_with_X$source,meta_network_with_X$target))
compartment_codes <- compartment_codes[grepl("Metab",compartment_codes)]
compartment_codes <- unique(str_match(compartment_codes,"___.____"))
compartment_mapping <- list()
for(i in 1:length(compartment_codes))
{
df <- kegg_to_pubchem
df$X2 <- paste(df$X2, compartment_codes[i], sep = "")
compartment_mapping[[i]] <- df
}
compartment_mapping <- as.data.frame(do.call(rbind, compartment_mapping))
compartment_mapping <- compartment_mapping[
compartment_mapping$X2 %in% meta_network_with_X$source |
compartment_mapping$X2 %in% meta_network_with_X$target,
]
kegg_to_pubchem_with_comp <- compartment_mapping
names(kegg_to_pubchem_with_comp) <- c("KEGG","pubchem")
full_mapping <- merge(metab_to_kegg, kegg_to_pubchem_with_comp, by = "KEGG")
names(ttop_tumour_vs_healthy)[1] <- "metab_name"
ttop_tumour_vs_healthy$metab_name <- tolower(ttop_tumour_vs_healthy$metab_name)
full_mapping$metab_name <- tolower(full_mapping$metab_name)
ttop_tumour_vs_healthy <- merge(ttop_tumour_vs_healthy, full_mapping, by = "metab_name")
View(ttop_tumour_vs_healthy)
library(readr)
library(stringr)
library('org.Hs.eg.db')
setwd("~/Dropbox/COSMOS_MSB//")
#### Preparation des input metabolomic
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("data/metab_ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("support/metab_to_kegg.txt"))
meta_network_with_X <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
kegg_to_pubchem <- as.data.frame(
read_csv("support/kegg_to_pubchem_acofixed.txt",
col_names = FALSE))
View(ttop_tumour_vs_healthy)
ttop_tumour_vs_healthy[!(tolower(ttop_tumour_vs_healthy$ID) %in% metab_to_kegg$KEGG),"ID"]
tolower(ttop_tumour_vs_healthy$ID)
ttop_tumour_vs_healthy[!(tolower(ttop_tumour_vs_healthy$ID) %in% metab_to_kegg$metab_name),"ID"]
View(ttop_tumour_vs_healthy)
View(metab_to_kegg)
