{
return(x) #changed from NA to x to include reactions not associated with genes. Thanks Vitor.
}
}
}
} else
{
return(x)
}
}
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
library(readr)
library(biomaRt)
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("Dropbox/COSMOS/support/meta_network_carnival_ready_exch_solved_fullomni_metfiltered.csv"))
ttop_CPTAC_CCRCC <- as.data.frame(
read_csv("Dropbox/COSMOS/data/CPTAC/CPTAC_CCRCC_Transcriptome_rpkm/ttop_CPTAC_CCRCC.csv"))
expressed_gene_list <- gsub("X","",ttop_CPTAC_CCRCC$ID)
is_expressed <- function(x)
{
if(!grepl("Metab",x))
{
if(gsub("X","",x) %in% expressed_gene_list)
{
return(x)
} else
{
if(grepl("XGene[0-9]+__[0-9_]+$",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
if(grepl("XGene[0-9]+__[0-9_]+reverse",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- gsub("_reverse","",genes)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
return(NA) #changed from NA to x to include reactions not associated with genes. Thanks Vitor.
}
}
}
} else
{
return(x)
}
}
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
write_csv(meta_network_carnival_ready_exch_solved_fullomni,"~/Dropbox/COSMOS/support/meta_network_CCRCC_CPTAC_expfiltered.csv")
url <- paste0(
'http://omnipathdb.org/ptms?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath_ptm <- download_omnipath()
library(readr)
library(omicToolsTest)
library(vsn)
library(sva)
library(limma)
tableTopFormatter <- function(limma_result, coef, n)
{
ttop <- topTable(limma_result, coef = coef, number = n, adjust.method = "fdr")
ttop$ID <- row.names(ttop)
ttop <- ttop[,c(7,1,2,3,4,5,6)]
return(ttop)
}
###Pre-processing
metabolomic_df <- as.data.frame(read_csv("~/Dropbox/Marco/marco_multi_omic_integration/data/metabolomic_df.csv"))
targets <-as.data.frame(read_csv("~/Dropbox/Marco/marco_multi_omic_integration/support/metabolomic_targets.csv"))
row.names(metabolomic_df) <- metabolomic_df[,1]
metabolomic_df <- metabolomic_df[,-1]
batches <- metabolomic_df
##Normalisation
fit <- vsnMatrix(as.matrix(batches[,c(1:20)]))
meanSdPlot(fit)
batches[,c(1:20)] <- as.data.frame(vsn::predict(fit,as.matrix(batches[,c(1:20)])))
fit <- vsnMatrix(as.matrix(batches[,c(21:32)]))
meanSdPlot(fit)
batches[,c(21:32)] <- as.data.frame(vsn::predict(fit,as.matrix(batches[,c(21:32)])))
batches <- batches[rowSums(is.na(batches)) < 12,]
batches <- batches[,c(21:32)]
targets <- targets[targets$sample %in% names(batches),]
magicPlotMaker(batches, "~/Desktop/test", targets)
unique(targets$condition)
###Differential analysis
limmaRes <- runLimma(batches, targets, comparisons = list(c(2,-1), c(3,-2)))
ttop <- ttopFormatter(topTable(limmaRes[[1]], coef = 1, number = 70, adjust.method = "fdr"))
View(ttop)
View(targets)
tableTopFormatter <- function(limma_result, coef, n)
{
ttop <- topTable(limma_result, coef = coef, number = n)
ttop$ID <- row.names(ttop)
ttop <- ttop[,c(7,1,2,3,4,5,6)]
return(ttop)
}
library(readr)
library(dplyr)
###Pre-p;rocessing
Phospho_STY_Sites <- as.data.frame(read_delim("~/Dropbox/Marco/marco_multi_omic_integration/data/Phospho (STY)Sites.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
Phospho_STY_Sites$`Gene names` <- gsub("[;].*","",Phospho_STY_Sites$`Gene names`)
Phospho_STY_Sites$`Positions within proteins` <- gsub("[;].*","",Phospho_STY_Sites$`Positions within proteins`)
phospho <- as.data.frame(Phospho_STY_Sites[,c(8,150,161,167,168,169,170,171,172,173,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166)])
plot(hist(phospho$`Localization prob`, breaks = 100))
phospho <- as.data.frame(Phospho_STY_Sites[,c(150,161,167,168,169,170,171,172,173,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166)])
Phospho_STY_Sites$ID <- apply(Phospho_STY_Sites[ , c(6,112) ] , 1 , paste , collapse = "_" )
Phospho_STY_Sites$ID <- apply(Phospho_STY_Sites[ , c(364,2) ] , 1 , paste , collapse = "" )
phospho$ID <- Phospho_STY_Sites$ID
length(unique(phospho$ID)) - length(phospho$ID)
batches <- phospho
batches <- batches %>% group_by(ID) %>% summarise_each(funs(sum(., na.rm = TRUE)))
batches <- as.data.frame(batches)
row.names(batches) <- batches$ID
batches <- batches[,-1]
library(omicToolsTest)
batches[batches == 0] <- NA
batches <- batches[rowSums(is.na(batches)) < 22,]
names(batches) <- c("HK2_1","HK2_2","HK2_3","HK2_4","HK2_5",
"786-O+EV_1","786-O+EV_2","786-O+EV_3","786-O+EV_4","786-O+EV_5",
"786-O+VHL_1","786-O+VHL_2","786-O+VHL_3","786-O+VHL_4","786-O+VHL_5",
"786-M1A+EV_1","786-M1A+EV_2","786-M1A+EV_3","786-M1A+EV_4","786-M1A+EV_5",
"786-M1A+VHL_2","786-M1A+VHL_3","786-M1A+VHL_4","786-M1A+VHL_5")
targets <- as.data.frame(matrix(NA,ncol = 2, nrow = 24))
names(targets) <- c("sample","condition")
targets$sample <- names(batches)
targets$condition<- c(rep("HK2", 5), rep("786-O+EV",5), rep("786-O+VHL",5), rep("786-M1A+EV", 5), rep("786-M1A+VHL",4))
###Normalisation
library(vsn)
fit <- vsnMatrix(as.matrix(batches))
meanSdPlot(fit)
batches <- as.data.frame(vsn::predict(fit,as.matrix(batches)))
sub_batches <- batches[,names(batches) %in% targets[targets$condition %in% c("786-O+EV","786-M1A+EV"), 1]]
sub_target <- targets[targets$condition %in% c("786-O+EV","786-M1A+EV"), ]
#magicPlotMaker(batches, "~/Dropbox/Marco/marco_multi_omic_integration/visualisation/phospho/vsn/",targets)
magicPlotMaker(sub_batches, "~/Dropbox/Marco/marco_multi_omic_integration/visualisation/phospho/vsn/M1AvO_only/",sub_target)
###Differential analysis
library(limma)
limma_res <- runLimma(batches, targets, comparisons = list(c(4,-2),c(5,-4),c(5,-2),c(5,-4,-4,2)))
ttop_M1AvO <- tableTopFormatter(limma_res[[1]], 1, 13760)
View(ttop_M1AvO)
df <- as.data.frame(cbind(c('a','b','b','c'),c('d','d_S234','f_4546','a')))
View(df)
pathways <- as.data.frame(cbind(c('a','b','c'), rep('pathway_A',3)))
View(pathways)
View(df)
df$mor <- c(1,1,1,-1)
names(df) <- c('regulator','target','mor')
names(pathways)[1] <- 'regulator'
pathway_targets <- merge(df,pathways, by = 'regulator')
View(pathway_targets)
pathway_targets <- pathway_targets[,c(4,2,3)]
View(df)
View(pathways)
View(pathway_targets)
library(readr)
#Import recon3D reaction network in sif format
reaction_network_recon3_no_cofact <- as.data.frame(read_csv("Dropbox/Meta_PKN/recon3D_netowrk/reaction_network_recon3_no_cofact.csv"))
#Import STITCH allosteric interactions in SIF format
STITCH_900_sif <- as.data.frame(read_csv("Dropbox/Meta_PKN/STITCH_network/STITCH_900_sif.csv"))
#Import omnipath
url <- "http://omnipathdb.org/interactions?types=post_translational,transcriptional&datasets=omnipath,pathwayextra,dorothea&fields=sources,references,curation_effort,dorothea_level,type&genesymbols=yes"
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omni_network <- download_omnipath()
omni_network <- omni_network[omni_network$consensus_stimulation != 0 | omni_network$consensus_inhibition != 0,]
omni_network <- omni_network[,c(3,4,9,10)]
omni_network$Interaction <- omni_network$consensus_stimulation - omni_network$consensus_inhibition
cons_0 <- omni_network[omni_network$Interaction == 0,]
omni_network <- omni_network[omni_network$Interaction != 0,]
cons_0$consensus_inhibition <- 0
cons_0$Interaction <- 1
omni_network <- as.data.frame(rbind(omni_network,cons_0))
cons_0$consensus_inhibition <- 1
cons_0$consensus_stimulation <- 0
cons_0$Interaction <- -1
omni_network <- as.data.frame(rbind(omni_network,cons_0))
omni_network <- omni_network[,c(1,5,2)]
View(omni_network)
library(readr)
#Import recon3D reaction network in sif format
reaction_network_recon3_no_cofact <- as.data.frame(read_csv("Dropbox/Meta_PKN/recon3D_netowrk/reaction_network_recon3_no_cofact.csv"))
#Import STITCH allosteric interactions in SIF format
STITCH_900_sif <- as.data.frame(read_csv("Dropbox/Meta_PKN/STITCH_network/STITCH_900_sif.csv"))
#Import omnipath
url <- "http://omnipathdb.org/interactions?types=post_translational,transcriptional&datasets=omnipath,pathwayextra,dorothea&fields=sources,references,curation_effort,dorothea_level,type&genesymbols=yes"
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omni_network <- download_omnipath()
View(omni_network)
View(omni_network)
library(readr)
library(omicToolsTest)
library(limma)
library(vsn)
#Import data
metabolomic_samples_raw <- as.data.frame(read_delim("~/Dropbox/kidney_cancer_multiomic_pipeline/data/metabolomic/metabolomic_samples_raw.csv",
";", escape_double = FALSE, na = "NF",
trim_ws = TRUE))
library(readr)
metab_first_batch <- read_csv("Dropbox/kidney_fibrosis_multiomics/data/metab_first_batch.csv")
View(metab_first_batch)
metab_first_batch <- metab_first_batch[,-1]
towrite <- as.data.frame(read_csv("Dropbox/kidney_fibrosis_multiomics/data/metab_first_batch.csv"))
library(dorothea)
library(readr)
library(viper)
# dorothea_df<- as.data.frame(dorothea_hs[dorothea_hs$confidence %in% c("A","B","C","D"),c(3,1,4)])
setwd("~/Dropbox/COSMOS_MSB/")
# write_csv(dorothea_df, "support/DOROTHEA_20200811.csv")
dorothea_df <- as.data.frame(
read_csv("support/DOROTHEA_20200811.csv"))
library(dorothea)
library(readr)
library(viper)
# dorothea_df<- as.data.frame(dorothea_hs[dorothea_hs$confidence %in% c("A","B","C","D"),c(3,1,4)])
setwd("~/Dropbox/COSMOS_MSB/")
# write_csv(dorothea_df, "support/DOROTHEA_20200811.csv")
dorothea_df <- as.data.frame(
read_csv("support/DOROTHEA_20200811.csv"))
source("scripts/limma_functions.R")
source("scripts/viper_functions.R")
dorothea_viper <- df_to_viper_regulon(dorothea_df)
ttop_tumorvshealthy <- as.data.frame(
read_csv("data/RNA_ttop_tumorvshealthy.csv"))
RNAseq_entrez_to_symbol <- as.data.frame(read_delim("support/RNAseq_entrez_to_symbol",
"\t", escape_double = FALSE, col_types = cols(`yourlist:M20191127216DA2B77BFBD2E6699CA9B6D1C41EB259129CL` = col_character()),
trim_ws = TRUE)) #from uniprot 20191127
names(RNAseq_entrez_to_symbol)[1] <- "ID"
ttop_tumorvshealthy <- merge(ttop_tumorvshealthy, RNAseq_entrez_to_symbol[,c(1,6)])
ttop_tumorvshealthy <- ttop_tumorvshealthy[,c(8,2:7)]
names(ttop_tumorvshealthy)[1] <- "ID"
ttop_tumorvshealthy$ID <- gsub(" .*","",ttop_tumorvshealthy$ID)
ttop_tumorvshealthy <- unique(ttop_tumorvshealthy)
eset <- ttop_tumorvshealthy$t
names(eset) <- ttop_tumorvshealthy$ID
viperRes <- as.data.frame(viper(eset = eset, regulon = dorothea_viper, minsize = 10, adaptive.size = F, eset.filter = F, pleiotropy = T))
viperRes$TF <- row.names(viperRes)
viperRes <- viperRes[,c(2,1)]
names(viperRes) <- c("ID","NES")
length(unique(dorothea_df$tf))
View(viperRes)
library(readr)
setwd("~/Dropbox/COSMOS_MSB/")
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
expressed_gene_list <- as.data.frame(
read_csv("support/expressed_gene_list.txt",
col_names = FALSE))
expressed_gene_list <- as.character(as.vector(as.matrix(expressed_gene_list)))
is_expressed <- function(x)
{
if(!grepl("Metab",x))
{
if(gsub("X","",x) %in% expressed_gene_list)
{
return(x)
} else
{
if(grepl("XGene[0-9]+__[0-9_]+$",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
if(grepl("XGene[0-9]+__[0-9_]+reverse",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- gsub("_reverse","",genes)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
return(NA)
}
}
}
} else
{
return(x)
}
}
# is_expressed("XGene3004__124975_91227")
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
swisscheese_PKN_list <- lapply(seq(2,50,2),function(x,meta_PKN)
{
number_shuffled_edges <- x * length(meta_PKN[,1]) / 100
meta_PKN <- meta_PKN[sample(1:length(meta_PKN[,1]),size = length(meta_PKN[,1]),replace = F),]
swisschesse_PKN <- meta_PKN
swisschesse_PKN[1:number_shuffled_edges,1] <- swisschesse_PKN[sample(1:number_shuffled_edges,size = number_shuffled_edges, replace = F),1]
swisschesse_PKN$source <- sapply(swisschesse_PKN$source,is_expressed)
swisschesse_PKN <- swisschesse_PKN[complete.cases(swisschesse_PKN),]
swisschesse_PKN$target <- sapply(swisschesse_PKN$target,is_expressed)
swisschesse_PKN <- swisschesse_PKN[complete.cases(swisschesse_PKN),]
return(swisschesse_PKN)
}, meta_PKN = meta_network_carnival_ready_exch_solved_fullomni)
names(swisscheese_PKN_list) <- seq(2,50,2)
View(meta_network_carnival_ready_exch_solved_fullomni)
View(swisscheese_PKN_list[[1]])
test  <- swisscheese_PKN_list[[1]]
test2 <- meta_network_carnival_ready_exch_solved_fullomni
test <- test[order(test$source),]
test2 <- test2[order(test2$source),]
View(test)
View(test2)
sum(test$target == test2$target)
test  <- swisscheese_PKN_list[[2]]
test2 <- meta_network_carnival_ready_exch_solved_fullomni
test <- test[order(test$source),]
test2 <- test2[order(test2$source),]
sum(test$target == test2$target)
sum(test$source == test2$source)
for(i in 1:25)
{
test  <- swisscheese_PKN_list[[i]]
test2 <- meta_network_carnival_ready_exch_solved_fullomni
test <- test[order(test$source),]
test2 <- test2[order(test2$source),]
print(sum(test$source == test2$source))
}
for(i in 1:25)
{
test  <- swisscheese_PKN_list[[i]]
test2 <- meta_network_carnival_ready_exch_solved_fullomni
test <- test[order(test$source),]
test2 <- test2[order(test2$source),]
print(sum(test$target == test2$target))
}
length(meta_network_carnival_ready_exch_solved_fullomni[,1])
test <- sample(1:length(meta_network_carnival_ready_exch_solved_fullomni[,1]),size = length(meta_network_carnival_ready_exch_solved_fullomni[,1]),replace = F)
test
View(sort(test))
2 * length(meta_network_carnival_ready_exch_solved_fullomni[,1]) / 100
1:(2 * length(meta_network_carnival_ready_exch_solved_fullomni[,1]) / 100)
View(1:(2 * length(meta_network_carnival_ready_exch_solved_fullomni[,1]) / 100))
View(swisscheese_PKN_list)
test  <- swisscheese_PKN_list[[6]]
test2 <-
as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("support/metaPKN.csv"))
test2 <- meta_network_carnival_ready_exch_solved_fullomni
meta_PKN = meta_network_carnival_ready_exch_solved_fullomni
x <- 2
number_shuffled_edges <- x * length(meta_PKN[,1]) / 100
View(meta_PKN)
meta_PKN <- meta_PKN[sample(1:length(meta_PKN[,1]),size = length(meta_PKN[,1]),replace = F),]
meta_PKN = meta_network_carnival_ready_exch_solved_fullomni
test2 <- meta_PKN
meta_PKN <- meta_PKN[sample(1:length(meta_PKN[,1]),size = length(meta_PKN[,1]),replace = F),]
View(test2)
View(test2)
interaction_suffler_PKN <- meta_PKN
interaction_suffler_PKN[1:number_shuffled_edges,1] <- interaction_suffler_PKN[sample(1:number_shuffled_edges,size = number_shuffled_edges, replace = F),1]
View(meta_PKN)
View(interaction_suffler_PKN)
interaction_suffler_PKN$source <- sapply(interaction_suffler_PKN$source,is_expressed)
interaction_suffler_PKN <- interaction_suffler_PKN[complete.cases(interaction_suffler_PKN),]
interaction_suffler_PKN$target <- sapply(interaction_suffler_PKN$target,is_expressed)
number_shuffled_edges <- x * length(meta_PKN[,1]) / 100
meta_PKN <- meta_PKN[sample(1:length(meta_PKN[,1]),size = length(meta_PKN[,1]),replace = F),]
interaction_suffler_PKN <- meta_PKN
interaction_suffler_PKN[1:number_shuffled_edges,1] <- interaction_suffler_PKN[sample(1:number_shuffled_edges,size = number_shuffled_edges, replace = F),1]
test  <- interaction_suffler_PKN
test2 <- meta_PKN
test <- test[order(test$source),]
test2 <- test2[order(test2$source),]
print(sum(test$target == test2$target))
interaction_suffler_PKN$source <- sapply(interaction_suffler_PKN$source,is_expressed)
interaction_suffler_PKN <- interaction_suffler_PKN[complete.cases(interaction_suffler_PKN),]
interaction_suffler_PKN$target <- sapply(interaction_suffler_PKN$target,is_expressed)
interaction_suffler_PKN <- interaction_suffler_PKN[complete.cases(interaction_suffler_PKN),]
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
test  <- interaction_suffler_PKN
test2 <- meta_network_carnival_ready_exch_solved_fullomni
test <- test[order(test$source),]
test2 <- test2[order(test2$source),]
print(sum(test$target == test2$target))
test$edge <- paste0(test$source, test$interaction, test$target)
test2$edge <- paste0(test2$source, test2$interaction, test2$target)
print(sum(test$edge %in% test2$edge))
library(readr)
setwd("~/Dropbox/COSMOS_MSB/")
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("support/metaPKN.csv"))
expressed_gene_list <- as.data.frame(
read_csv("support/expressed_gene_list.txt",
col_names = FALSE))
expressed_gene_list <- as.character(as.vector(as.matrix(expressed_gene_list)))
is_expressed <- function(x)
{
if(!grepl("Metab",x))
{
if(gsub("X","",x) %in% expressed_gene_list)
{
return(x)
} else
{
if(grepl("XGene[0-9]+__[0-9_]+$",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
if(grepl("XGene[0-9]+__[0-9_]+reverse",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- gsub("_reverse","",genes)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
return(NA)
}
}
}
} else
{
return(x)
}
}
# is_expressed("XGene3004__124975_91227")
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
interaction_suffler_PKN_list <- lapply(seq(2,50,2),function(x,meta_PKN)
{
number_shuffled_edges <- x * length(meta_PKN[,1]) / 100
meta_PKN <- meta_PKN[sample(1:length(meta_PKN[,1]),size = length(meta_PKN[,1]),replace = F),]
interaction_suffler_PKN <- meta_PKN
interaction_suffler_PKN[1:number_shuffled_edges,1] <- interaction_suffler_PKN[sample(1:number_shuffled_edges,size = number_shuffled_edges, replace = F),1]
interaction_suffler_PKN$source <- sapply(interaction_suffler_PKN$source,is_expressed)
interaction_suffler_PKN <- interaction_suffler_PKN[complete.cases(interaction_suffler_PKN),]
interaction_suffler_PKN$target <- sapply(interaction_suffler_PKN$target,is_expressed)
interaction_suffler_PKN <- interaction_suffler_PKN[complete.cases(interaction_suffler_PKN),]
return(interaction_suffler_PKN)
}, meta_PKN = meta_network_carnival_ready_exch_solved_fullomni)
names(interaction_suffler_PKN_list) <- seq(2,50,2)
# save(swisscheese_PKN_list,file = "support/revisions_swisscheese_PKN_list.RData") #The sampling is random. Save your res somewhere safe before overwritting it.
for(i in 1:25)
{
test  <- interaction_suffler_PKN_list[[i]]
test2 <- meta_network_carnival_ready_exch_solved_fullomni
test <- test[order(test$source),]
test2 <- test2[order(test2$source),]
test$edge <- paste0(test$source, test$interaction, test$target)
test2$edge <- paste0(test2$source, test2$interaction, test2$target)
print(sum(test$edge %in% test2$edge))
}
save(interaction_suffler_PKN_list,file = "support/revisions_interaction_suffler_PKN_list.RData") #The sampling is random. Save your res somewhere safe before overwritting it.
