omni_network[omni_network$source_genesymbol == "ECM1" & omni_network$target_genesymbol == "NT5E",]
omni_network[omni_network$source_genesymbol == "ECM1" & omni_network$target_genesymbol == "NT5E",]
library(readr)
Wang_network <- read_csv("Desktop/Wang_network",
col_names = FALSE)
View(Wang_network)
library(readr)
Wang_nodes <- read_csv("Desktop/Wang_nodes")
View(Wang_nodes)
library(readr)
CCRCC_CPTAC_Kinase_Activities <- as.data.frame(
read_delim("Dropbox/COSMOS/data/CPTAC/CCRCC_CPTAC_Kinase_Activities.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
library(readr)
library(biomaRt)
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("Dropbox/COSMOS/support/meta_network_carnival_ready_exch_solved_fullomni_metfiltered.csv"))
ttop_CPTAC_CCRCC <- as.data.frame(
read_csv("Dropbox/COSMOS/data/CPTAC/CPTAC_CCRCC_Transcriptome_rpkm/ttop_CPTAC_CCRCC.csv"))
expressed_gene_list <- gsub("X","",ttop_CPTAC_CCRCC$ID)
##MAPPING
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
is_expressed <- function(x)
{
if(!grepl("Metab",x))
{
if(gsub("X","",x) %in% expressed_gene_list)
{
return(x)
} else
{
if(grepl("XGene[0-9]+__[0-9_]+$",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
if(grepl("XGene[0-9]+__[0-9_]+reverse",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- gsub("_reverse","",genes)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
return(x) #changed from NA to x to include reactions not associated with genes. Thanks Vitor.
}
}
}
} else
{
return(x)
}
}
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
library(readr)
library(biomaRt)
meta_network_carnival_ready_exch_solved_fullomni <- as.data.frame(
read_csv("Dropbox/COSMOS/support/meta_network_carnival_ready_exch_solved_fullomni_metfiltered.csv"))
ttop_CPTAC_CCRCC <- as.data.frame(
read_csv("Dropbox/COSMOS/data/CPTAC/CPTAC_CCRCC_Transcriptome_rpkm/ttop_CPTAC_CCRCC.csv"))
expressed_gene_list <- gsub("X","",ttop_CPTAC_CCRCC$ID)
is_expressed <- function(x)
{
if(!grepl("Metab",x))
{
if(gsub("X","",x) %in% expressed_gene_list)
{
return(x)
} else
{
if(grepl("XGene[0-9]+__[0-9_]+$",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
if(grepl("XGene[0-9]+__[0-9_]+reverse",x))
{
genes <- gsub("XGene[0-9]+__","",x)
genes <- gsub("_reverse","",genes)
genes <- strsplit(genes,"_")[[1]]
if(sum(genes %in% expressed_gene_list) != length(genes))
{
return(NA)
} else
{
return(x)
}
} else
{
return(NA) #changed from NA to x to include reactions not associated with genes. Thanks Vitor.
}
}
}
} else
{
return(x)
}
}
meta_network_carnival_ready_exch_solved_fullomni$source <- sapply(meta_network_carnival_ready_exch_solved_fullomni$source,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
meta_network_carnival_ready_exch_solved_fullomni$target <- sapply(meta_network_carnival_ready_exch_solved_fullomni$target,is_expressed)
meta_network_carnival_ready_exch_solved_fullomni <- meta_network_carnival_ready_exch_solved_fullomni[complete.cases(meta_network_carnival_ready_exch_solved_fullomni),]
write_csv(meta_network_carnival_ready_exch_solved_fullomni,"~/Dropbox/COSMOS/support/meta_network_CCRCC_CPTAC_expfiltered.csv")
url <- paste0(
'http://omnipathdb.org/ptms?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath_ptm <- download_omnipath()
library(readr)
library(omicToolsTest)
library(vsn)
library(sva)
library(limma)
tableTopFormatter <- function(limma_result, coef, n)
{
ttop <- topTable(limma_result, coef = coef, number = n, adjust.method = "fdr")
ttop$ID <- row.names(ttop)
ttop <- ttop[,c(7,1,2,3,4,5,6)]
return(ttop)
}
###Pre-processing
metabolomic_df <- as.data.frame(read_csv("~/Dropbox/Marco/marco_multi_omic_integration/data/metabolomic_df.csv"))
targets <-as.data.frame(read_csv("~/Dropbox/Marco/marco_multi_omic_integration/support/metabolomic_targets.csv"))
row.names(metabolomic_df) <- metabolomic_df[,1]
metabolomic_df <- metabolomic_df[,-1]
batches <- metabolomic_df
##Normalisation
fit <- vsnMatrix(as.matrix(batches[,c(1:20)]))
meanSdPlot(fit)
batches[,c(1:20)] <- as.data.frame(vsn::predict(fit,as.matrix(batches[,c(1:20)])))
fit <- vsnMatrix(as.matrix(batches[,c(21:32)]))
meanSdPlot(fit)
batches[,c(21:32)] <- as.data.frame(vsn::predict(fit,as.matrix(batches[,c(21:32)])))
batches <- batches[rowSums(is.na(batches)) < 12,]
batches <- batches[,c(21:32)]
targets <- targets[targets$sample %in% names(batches),]
magicPlotMaker(batches, "~/Desktop/test", targets)
unique(targets$condition)
###Differential analysis
limmaRes <- runLimma(batches, targets, comparisons = list(c(2,-1), c(3,-2)))
ttop <- ttopFormatter(topTable(limmaRes[[1]], coef = 1, number = 70, adjust.method = "fdr"))
View(ttop)
View(targets)
tableTopFormatter <- function(limma_result, coef, n)
{
ttop <- topTable(limma_result, coef = coef, number = n)
ttop$ID <- row.names(ttop)
ttop <- ttop[,c(7,1,2,3,4,5,6)]
return(ttop)
}
library(readr)
library(dplyr)
###Pre-p;rocessing
Phospho_STY_Sites <- as.data.frame(read_delim("~/Dropbox/Marco/marco_multi_omic_integration/data/Phospho (STY)Sites.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
Phospho_STY_Sites$`Gene names` <- gsub("[;].*","",Phospho_STY_Sites$`Gene names`)
Phospho_STY_Sites$`Positions within proteins` <- gsub("[;].*","",Phospho_STY_Sites$`Positions within proteins`)
phospho <- as.data.frame(Phospho_STY_Sites[,c(8,150,161,167,168,169,170,171,172,173,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166)])
plot(hist(phospho$`Localization prob`, breaks = 100))
phospho <- as.data.frame(Phospho_STY_Sites[,c(150,161,167,168,169,170,171,172,173,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166)])
Phospho_STY_Sites$ID <- apply(Phospho_STY_Sites[ , c(6,112) ] , 1 , paste , collapse = "_" )
Phospho_STY_Sites$ID <- apply(Phospho_STY_Sites[ , c(364,2) ] , 1 , paste , collapse = "" )
phospho$ID <- Phospho_STY_Sites$ID
length(unique(phospho$ID)) - length(phospho$ID)
batches <- phospho
batches <- batches %>% group_by(ID) %>% summarise_each(funs(sum(., na.rm = TRUE)))
batches <- as.data.frame(batches)
row.names(batches) <- batches$ID
batches <- batches[,-1]
library(omicToolsTest)
batches[batches == 0] <- NA
batches <- batches[rowSums(is.na(batches)) < 22,]
names(batches) <- c("HK2_1","HK2_2","HK2_3","HK2_4","HK2_5",
"786-O+EV_1","786-O+EV_2","786-O+EV_3","786-O+EV_4","786-O+EV_5",
"786-O+VHL_1","786-O+VHL_2","786-O+VHL_3","786-O+VHL_4","786-O+VHL_5",
"786-M1A+EV_1","786-M1A+EV_2","786-M1A+EV_3","786-M1A+EV_4","786-M1A+EV_5",
"786-M1A+VHL_2","786-M1A+VHL_3","786-M1A+VHL_4","786-M1A+VHL_5")
targets <- as.data.frame(matrix(NA,ncol = 2, nrow = 24))
names(targets) <- c("sample","condition")
targets$sample <- names(batches)
targets$condition<- c(rep("HK2", 5), rep("786-O+EV",5), rep("786-O+VHL",5), rep("786-M1A+EV", 5), rep("786-M1A+VHL",4))
###Normalisation
library(vsn)
fit <- vsnMatrix(as.matrix(batches))
meanSdPlot(fit)
batches <- as.data.frame(vsn::predict(fit,as.matrix(batches)))
sub_batches <- batches[,names(batches) %in% targets[targets$condition %in% c("786-O+EV","786-M1A+EV"), 1]]
sub_target <- targets[targets$condition %in% c("786-O+EV","786-M1A+EV"), ]
#magicPlotMaker(batches, "~/Dropbox/Marco/marco_multi_omic_integration/visualisation/phospho/vsn/",targets)
magicPlotMaker(sub_batches, "~/Dropbox/Marco/marco_multi_omic_integration/visualisation/phospho/vsn/M1AvO_only/",sub_target)
###Differential analysis
library(limma)
limma_res <- runLimma(batches, targets, comparisons = list(c(4,-2),c(5,-4),c(5,-2),c(5,-4,-4,2)))
ttop_M1AvO <- tableTopFormatter(limma_res[[1]], 1, 13760)
View(ttop_M1AvO)
df <- as.data.frame(cbind(c('a','b','b','c'),c('d','d_S234','f_4546','a')))
View(df)
pathways <- as.data.frame(cbind(c('a','b','c'), rep('pathway_A',3)))
View(pathways)
View(df)
df$mor <- c(1,1,1,-1)
names(df) <- c('regulator','target','mor')
names(pathways)[1] <- 'regulator'
pathway_targets <- merge(df,pathways, by = 'regulator')
View(pathway_targets)
pathway_targets <- pathway_targets[,c(4,2,3)]
View(df)
View(pathways)
View(pathway_targets)
library(readr)
#Import recon3D reaction network in sif format
reaction_network_recon3_no_cofact <- as.data.frame(read_csv("Dropbox/Meta_PKN/recon3D_netowrk/reaction_network_recon3_no_cofact.csv"))
#Import STITCH allosteric interactions in SIF format
STITCH_900_sif <- as.data.frame(read_csv("Dropbox/Meta_PKN/STITCH_network/STITCH_900_sif.csv"))
#Import omnipath
url <- "http://omnipathdb.org/interactions?types=post_translational,transcriptional&datasets=omnipath,pathwayextra,dorothea&fields=sources,references,curation_effort,dorothea_level,type&genesymbols=yes"
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omni_network <- download_omnipath()
omni_network <- omni_network[omni_network$consensus_stimulation != 0 | omni_network$consensus_inhibition != 0,]
omni_network <- omni_network[,c(3,4,9,10)]
omni_network$Interaction <- omni_network$consensus_stimulation - omni_network$consensus_inhibition
cons_0 <- omni_network[omni_network$Interaction == 0,]
omni_network <- omni_network[omni_network$Interaction != 0,]
cons_0$consensus_inhibition <- 0
cons_0$Interaction <- 1
omni_network <- as.data.frame(rbind(omni_network,cons_0))
cons_0$consensus_inhibition <- 1
cons_0$consensus_stimulation <- 0
cons_0$Interaction <- -1
omni_network <- as.data.frame(rbind(omni_network,cons_0))
omni_network <- omni_network[,c(1,5,2)]
View(omni_network)
library(readr)
#Import recon3D reaction network in sif format
reaction_network_recon3_no_cofact <- as.data.frame(read_csv("Dropbox/Meta_PKN/recon3D_netowrk/reaction_network_recon3_no_cofact.csv"))
#Import STITCH allosteric interactions in SIF format
STITCH_900_sif <- as.data.frame(read_csv("Dropbox/Meta_PKN/STITCH_network/STITCH_900_sif.csv"))
#Import omnipath
url <- "http://omnipathdb.org/interactions?types=post_translational,transcriptional&datasets=omnipath,pathwayextra,dorothea&fields=sources,references,curation_effort,dorothea_level,type&genesymbols=yes"
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omni_network <- download_omnipath()
View(omni_network)
View(omni_network)
library(readr)
library(omicToolsTest)
library(limma)
library(vsn)
#Import data
metabolomic_samples_raw <- as.data.frame(read_delim("~/Dropbox/kidney_cancer_multiomic_pipeline/data/metabolomic/metabolomic_samples_raw.csv",
";", escape_double = FALSE, na = "NF",
trim_ws = TRUE))
library(readr)
metab_first_batch <- read_csv("Dropbox/kidney_fibrosis_multiomics/data/metab_first_batch.csv")
View(metab_first_batch)
metab_first_batch <- metab_first_batch[,-1]
towrite <- as.data.frame(read_csv("Dropbox/kidney_fibrosis_multiomics/data/metab_first_batch.csv"))
library(readr)
experiment_paired_fastq_spreadsheet_template <- as.data.frame(
read_delim("Downloads/experiment_paired_fastq_spreadsheet_template.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
df <- as.data.frame(matrix(NA,22,13))
names(df <- names(experiment_paired_fastq_spreadsheet_template))
library(readr)
experiment_paired_fastq_spreadsheet_template <- as.data.frame(
read_delim("Downloads/experiment_paired_fastq_spreadsheet_template.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
df <- as.data.frame(matrix(NA,22,13))
names(df) <- names(experiment_paired_fastq_spreadsheet_template)
View(df)
files <- list.files("/Volumes/kramann/RNASeq_COSMOS_IMPORTANT")
r1 <- files[grepl("R1_001.fastq",files)]
r1
r1 <- files[grepl("R1_001.fastq.gz$",files)]
r2 <- files[grepl("R2_001.fastq.gz$",files)]
df$forward_file_name <- r1
df$reverse_file_name <- r2
View(df)
df$instrument_model <- "Illumina NovaSeq 6000"
df$library_source <- "TRANSCRIPTOMIC"
df$library_selection <- "RANDOM"
df$library_strategy <- "RNA-Seq"
df$insert_size <- 400
df$forward_file_name <- r1
df$reverse_file_name <- r2
df$sample_alias <- gsub("_.*","",df$forward_file_name)
write_tsv(df, path = "~/Dropbox/COSMOS_MSB/support/RNAseq_files_submission_info.tsv")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("BiRewire")
library(BiRewire)
library(readr)
test <- readRDS("~/Dropbox/COSMOS_MSB/support/shuffled_dsg_list.Rds")
test <- readRDS("~/Dropbox/COSMOS_MSB/support/rewired_net_1000_1000.Rds")
?birewire.rewire.dsg
library(BiRewire)
?birewire.rewire.dsg
?birewire.save.dsg
test <- readRDS("~/Dropbox/COSMOS_MSB/support/rewired_net_1000_1000.Rds")
test <- birewire.build.dsg(test)
library(readr)
library(biomaRt)
library(piano)
library(ggplot2)
library("org.Hs.eg.db")
setwd("~/Dropbox/COSMOS_MSB/")
source("scripts/COSMOS_functions.R")
source("scripts/piano_function.R")
#Load inputs
meta_network <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
prots <- unique(c(meta_network$source,meta_network$target))
prots <- prots[!grepl("XMetab",prots)]
prots <- gsub("^X","",prots)
prots <- gsub("Gene[0-9]+__","",prots)
prots <- gsub("_reverse","",prots)
prots <- gsub("EXCHANGE.*","",prots)
prots <- unique(prots)
prots <- unlist(sapply(prots, function(x){unlist(strsplit(x,split = "_"))}))
gene_mapping <- "else"
if(gene_mapping == "ensembl")
{
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "entrezgene_id",
attributes = c('hgnc_symbol','entrezgene_id', "description"),
values = prots, mart = ensembl)
gene_mapping <- G_list[,1]
names(gene_mapping) <- G_list[,2]
} else
{
entrezid <- prots
gene_mapping <- mapIds(org.Hs.eg.db, entrezid, 'SYMBOL', 'ENTREZID')
gene_mapping <- unlist(gene_mapping)
gene_mapping <- gene_mapping[!is.na(gene_mapping)]
}
background <- sapply(prots, function(x, translation_dictionary){
return(translation_dictionary[x])
},translation_dictionary = gene_mapping)
names(background) <- 1:length(background)
background <- unique(background)
hallmarks <- gmt_to_df("support/h.all.v7.1.symbols.gmt_20200709.gmt")
cosmos_att <- as.data.frame(
read_csv("results/subnet_combined_att.csv"))
att <- cosmos_att
cosmos_att <- cosmos_att[cosmos_att$Nodes %in% background,]
cosmos_att <- unique(cosmos_att$Nodes)
hallmarks_ora <- runGSAhyper(genes = cosmos_att, universe = background, gsc = loadGSC(hallmarks))
hallmarks_ora <- as.data.frame(hallmarks_ora$resTab)
hallmarks_ora$pathway <- row.names(hallmarks_ora)
hallmarks_ora <- hallmarks_ora[order(hallmarks_ora$`Adjusted p-value`, decreasing = F),]
top_hallmark <- hallmarks_ora[1:20,c(7,1)]
top_hallmark <- top_hallmark[order(top_hallmark$`p-value`,decreasing = T),]
top_hallmark$pathway <- gsub("HALLMARK","",top_hallmark$pathway)
top_hallmark$pathway <- gsub("_"," ",top_hallmark$pathway)
top_hallmark$`p-value` <- -log10(top_hallmark$`p-value`)
top_hallmark$pathway <- factor(top_hallmark$pathway, levels = top_hallmark$pathway)
names(top_hallmark)[2] <- "-log10(p-value)"
ggplot(top_hallmark, aes(x = pathway, y = `-log10(p-value)`, fill = `-log10(p-value)`)) + geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
xlab("-log10(p-value)") +
ggtitle("COSMOS hallmark ORA") +
scale_fill_gradient(low="grey", high="darkred")
setwd("~/Dropbox/COSMOS_MSB/")
source("scripts/COSMOS_functions.R")
source("scripts/piano_function.R")
#Load inputs
meta_network <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
prots <- unique(c(meta_network$source,meta_network$target))
prots <- prots[!grepl("XMetab",prots)]
prots <- gsub("^X","",prots)
prots <- gsub("Gene[0-9]+__","",prots)
prots <- gsub("_reverse","",prots)
prots <- gsub("EXCHANGE.*","",prots)
prots <- unique(prots)
prots <- unlist(sapply(prots, function(x){unlist(strsplit(x,split = "_"))}))
gene_mapping <- "else"
if(gene_mapping == "ensembl")
{
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "entrezgene_id",
attributes = c('hgnc_symbol','entrezgene_id', "description"),
values = prots, mart = ensembl)
gene_mapping <- G_list[,1]
names(gene_mapping) <- G_list[,2]
} else
{
entrezid <- prots
gene_mapping <- mapIds(org.Hs.eg.db, entrezid, 'SYMBOL', 'ENTREZID')
gene_mapping <- unlist(gene_mapping)
gene_mapping <- gene_mapping[!is.na(gene_mapping)]
}
background <- sapply(prots, function(x, translation_dictionary){
return(translation_dictionary[x])
},translation_dictionary = gene_mapping)
names(background) <- 1:length(background)
background <- unique(background)
hallmarks <- gmt_to_df("support/h.all.v7.1.symbols.gmt_20200709.gmt")
cosmos_att <- as.data.frame(
read_csv("results/CPTAC/subnet_combined_att_full_newDoro_long.csv"))
att <- cosmos_att
cosmos_att <- cosmos_att[cosmos_att$Nodes %in% background,]
cosmos_att <- unique(cosmos_att$Nodes)
hallmarks_ora <- runGSAhyper(genes = cosmos_att, universe = background, gsc = loadGSC(hallmarks))
hallmarks_ora <- as.data.frame(hallmarks_ora$resTab)
hallmarks_ora$pathway <- row.names(hallmarks_ora)
hallmarks_ora <- hallmarks_ora[order(hallmarks_ora$`Adjusted p-value`, decreasing = F),]
top_hallmark <- hallmarks_ora[1:20,c(7,1)]
top_hallmark <- top_hallmark[order(top_hallmark$`p-value`,decreasing = T),]
top_hallmark$pathway <- gsub("HALLMARK","",top_hallmark$pathway)
top_hallmark$pathway <- gsub("_"," ",top_hallmark$pathway)
top_hallmark$`p-value` <- -log10(top_hallmark$`p-value`)
top_hallmark$pathway <- factor(top_hallmark$pathway, levels = top_hallmark$pathway)
names(top_hallmark)[2] <- "-log10(p-value)"
ggplot(top_hallmark, aes(x = pathway, y = `-log10(p-value)`, fill = `-log10(p-value)`)) + geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
xlab("-log10(p-value)") +
ggtitle("COSMOS hallmark ORA") +
scale_fill_gradient(low="grey", high="darkred")
View(top_hallmark)
write_csv(top_hallmark,'results/CPTAC/top_hallmarks.csv')
write_csv(top_hallmark,'results/CPTAC/CPTAC_top_hallmarks.csv')
library(readr)
library(biomaRt)
library(piano)
library(ggplot2)
library("org.Hs.eg.db")
setwd("~/Dropbox/COSMOS_MSB/")
source("scripts/COSMOS_functions.R")
source("scripts/piano_function.R")
#Load inputs
meta_network <- as.data.frame(
read_csv("support/metaPKN_filtered.csv"))
prots <- unique(c(meta_network$source,meta_network$target))
prots <- prots[!grepl("XMetab",prots)]
prots <- gsub("^X","",prots)
prots <- gsub("Gene[0-9]+__","",prots)
prots <- gsub("_reverse","",prots)
prots <- gsub("EXCHANGE.*","",prots)
prots <- unique(prots)
prots <- unlist(sapply(prots, function(x){unlist(strsplit(x,split = "_"))}))
gene_mapping <- "else"
if(gene_mapping == "ensembl")
{
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "entrezgene_id",
attributes = c('hgnc_symbol','entrezgene_id', "description"),
values = prots, mart = ensembl)
gene_mapping <- G_list[,1]
names(gene_mapping) <- G_list[,2]
} else
{
entrezid <- prots
gene_mapping <- mapIds(org.Hs.eg.db, entrezid, 'SYMBOL', 'ENTREZID')
gene_mapping <- unlist(gene_mapping)
gene_mapping <- gene_mapping[!is.na(gene_mapping)]
}
background <- sapply(prots, function(x, translation_dictionary){
return(translation_dictionary[x])
},translation_dictionary = gene_mapping)
names(background) <- 1:length(background)
background <- unique(background)
hallmarks <- gmt_to_df("support/h.all.v7.1.symbols.gmt_20200709.gmt")
cosmos_att <- as.data.frame(
read_csv("results/subnet_combined_att.csv"))
att <- cosmos_att
cosmos_att <- cosmos_att[cosmos_att$Nodes %in% background,]
cosmos_att <- unique(cosmos_att$Nodes)
hallmarks_ora <- runGSAhyper(genes = cosmos_att, universe = background, gsc = loadGSC(hallmarks))
hallmarks_ora <- as.data.frame(hallmarks_ora$resTab)
hallmarks_ora$pathway <- row.names(hallmarks_ora)
hallmarks_ora <- hallmarks_ora[order(hallmarks_ora$`Adjusted p-value`, decreasing = F),]
top_hallmark <- hallmarks_ora[1:20,c(7,1)]
top_hallmark <- top_hallmark[order(top_hallmark$`p-value`,decreasing = T),]
top_hallmark$pathway <- gsub("HALLMARK","",top_hallmark$pathway)
top_hallmark$pathway <- gsub("_"," ",top_hallmark$pathway)
top_hallmark$`p-value` <- -log10(top_hallmark$`p-value`)
top_hallmark$pathway <- factor(top_hallmark$pathway, levels = top_hallmark$pathway)
names(top_hallmark)[2] <- "-log10(p-value)"
write_csv(top_hallmark,'results/COSMOS_result/top_hallmarks.csv')
